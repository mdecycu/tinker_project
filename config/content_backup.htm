<h1>About</h1>
<p>Repo: <a href="https://github.com/mdecycu/cp2025">https://github.com/mdecycu/cp2025</a></p>
<p>Web: <a href="https://mde.tw/cp2025">https://mde.tw/cp2025</a></p>
<p>可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/portable_2026.7z">portable_2026.7z</a> (387MB)</p>
<p style="padding-left: 60px;">解開壓縮後，雙點擊 start_miniconda3.bat 啟動可攜系統，雙點擊 stop.bat 關閉可攜系統。</p>
<p style="padding-left: 60px;">可攜系統啟動後，在命令列執行 conda activate y:\envs\cmsimde 可進入能執行 CMSiMDE 的環境。</p>
<p style="padding-left: 60px;">若希望可攜系統啟動直接進入 cmsimde 環境，可將 start_miniconda3.bat 檔案中第 98 行: call "%CONDA_ROOT%\Scripts\activate.bat" %ENV_NAME% 更換為 call "%CONDA_ROOT%\Scripts\activate.bat" %Disk%:\envs\cmsimde。</p>
<p>課程內容:</p>
<p style="padding-left: 30px;">如何維持教室整齊清潔?</p>
<p style="padding-left: 60px;">學員定期打掃 (由助教安排) </p>
<p style="padding-left: 60px;">學員自律</p>
<p style="padding-left: 30px;">如何善用教室與工作站室硬體?</p>
<p style="padding-left: 60px;">電腦設定</p>
<p style="padding-left: 60px;">網路連線</p>
<p style="padding-left: 60px;">課餘時間預約 (由助教安排) </p>
<p style="padding-left: 30px;">Python 與 Javascript 程式語法在 <a href="https://mde.tw/cp2025/reeborg">Reeborg</a> 機器人系統上的應用。</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/python_2025/blob/main/%E7%AC%AC01%E8%AA%B2%EF%BC%9A%E5%88%9D%E8%AD%98Python.md">Python 程式教材</a></p>
<p style="padding-left: 30px;">利用 Git 與 Github 建立分組網站。</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">MS Teams 團隊代碼: w87x8do  </p>
<p>課程評分:</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff00;">作業報告 (60%)</span> - MS Teams 線上參與，6人一組每三週發表學習心得。</p>
<p style="padding-left: 60px;">w3、w7、w10、w14、w17、w18</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff00;">個人與分組網站維護 (40%)</span> - 每週至少兩次推送與課程進度相關的學習內容與心得。</p>
<p style="padding-left: 60px;">w9 期中自評、w18 期末自評</p>
<p>行事曆</p>
<p style="padding-left: 30px;">1a 上課時段: 每週三 13:20 - 16:10</p>
<p style="padding-left: 30px;">1b 上課時段: 每週四 09:10 - 12:00 (w17 1/1 放假)</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h2>talk</h2>
<p>Title: Opportunities and Challenges of Mechanical Design Engineering in the AI Era<br/><br/>Introduction</p>
<p>Ladies and gentlemen, esteemed colleagues, and distinguished guests,</p>
<p>It’s an honor to stand before you today to discuss a subject that is both deeply relevant and highly exciting in the world of engineering: the opportunities and challenges of mechanical design engineering in the AI era.<br/><br/>We are living in a transformative period—one where artificial intelligence is not just an abstract concept but a driving force in shaping industries, workflows, and how we think about design and innovation. The impact of AI on mechanical engineering is profound, creating new possibilities while also presenting significant challenges.<br/><br/>In the next 30 minutes, I will explore how AI is revolutionizing mechanical design, examine the opportunities it brings, delve into the challenges engineers must overcome, and share some thoughts on how we can best navigate this era of change.</p>
<p>1. The Role of AI in Mechanical Design</p>
<p>To begin, let’s take a closer look at how AI is changing the landscape of mechanical design engineering.<br/><br/>Traditionally, mechanical design has been a process driven by human intuition, manual calculations, and trial-and-error experimentation. Engineers would design structures, systems, or products, often relying on experience and expertise to solve complex problems. However, with the advent of AI and machine learning, this process has undergone a dramatic shift.<br/><br/>AI tools now allow engineers to analyze vast datasets in real-time, identify patterns that are too complex for the human mind, and optimize designs in ways that were previously unimaginable. With the power of deep learning algorithms, AI can generate optimized solutions that minimize material waste, reduce energy consumption, and improve overall performance.<br/><br/>One of the most exciting areas of AI in mechanical design is generative design. In generative design, engineers input specific parameters—such as material type, manufacturing methods, and cost constraints—and the AI system generates a multitude of design options, each optimized for performance and efficiency. This approach can lead to lighter, stronger, and more cost-effective products, especially in industries like aerospace, automotive, and robotics.<br/><br/>For example, in the aerospace industry, AI-powered design systems have enabled the creation of lightweight, yet incredibly strong structures, improving fuel efficiency and reducing manufacturing costs. In automotive design, AI has helped engineers create safer, more energy-efficient vehicles by optimizing every component, from chassis design to aerodynamics.<br/><br/>Another area where AI is making an impact is simulation and testing. Traditional methods of physical prototyping are time-consuming and costly. With AI-based simulations, engineers can predict how a product will behave under various real-world conditions before it is ever built. This not only speeds up the design process but also reduces the risk of failure during testing, ultimately saving both time and money.<br/><br/>2. Opportunities Brought by AI</p>
<p>Now, let's delve into the specific opportunities that AI presents to mechanical design engineers.<br/><br/>A. Enhanced Efficiency and Productivity</p>
<p>AI can significantly enhance productivity by automating repetitive tasks and optimizing workflows. With AI tools handling the more mundane aspects of design, engineers have more time to focus on higher-level, creative problem-solving. The ability to automate tasks like material selection, load calculations, and even aesthetic design elements allows for faster iterations and more efficient design processes.<br/><br/>B. Improved Precision and Accuracy</p>
<p>Another opportunity that AI brings is the ability to achieve much higher levels of precision and accuracy. In traditional mechanical design, even minor errors in calculations or measurements can have significant consequences, particularly in high-stakes industries like aerospace and medical devices. AI can perform complex calculations with precision and speed, significantly reducing the margin for error and ensuring that designs meet stringent safety and performance standards.<br/><br/>C. Innovation and Creativity</p>
<p>Perhaps one of the most exciting opportunities AI offers is the potential to foster innovation and creativity. By taking over routine tasks, AI allows engineers to focus on the more imaginative and forward-thinking aspects of design. In a way, AI can act as a creative partner, offering new solutions and perspectives that might not have been considered otherwise.<br/><br/>For instance, AI-powered tools can identify overlooked design possibilities or propose entirely new materials or methods of construction. These innovations could lead to breakthrough products that solve global challenges, such as sustainable energy solutions, eco-friendly materials, and more efficient transportation systems.<br/><br/>D. Integration with Advanced Manufacturing Techniques</p>
<p>AI also opens up new opportunities in the integration of additive manufacturing or 3D printing in mechanical design. With AI, engineers can design structures that are optimized for 3D printing, creating highly complex geometries that would be impossible or impractical using traditional methods. This allows for more flexibility in design and a reduction in waste, which is essential in the pursuit of more sustainable manufacturing practices.<br/><br/>3. Challenges in the AI Era</p>
<p>While the opportunities AI presents are vast, they are not without their challenges. Let’s now look at some of the key obstacles engineers face when working in the AI era.<br/><br/>A. The Need for New Skills</p>
<p>One of the most significant challenges is the need for engineers to acquire new skills. As AI takes over more routine, repetitive tasks, the role of the mechanical engineer is shifting. Engineers must now focus on creative problem-solving, strategic thinking, and collaboration. The rise of AI in design means that mechanical engineers must embrace new technologies, learn to work with AI systems, and understand how these tools can complement human expertise.<br/><br/>This shift also calls for a rethinking of education and training. Engineering curriculums will need to adapt to incorporate AI, machine learning, and data analytics as core competencies. Continuing education and upskilling will be essential for engineers to remain competitive in the workforce.<br/><br/>B. Data Quality and Security</p>
<p>As engineers rely more on AI, data becomes the lifeblood of the design process. AI systems require vast amounts of data to train their models, and the quality of this data directly impacts the effectiveness of the AI system. Ensuring the accuracy, completeness, and security of data is a major concern. Sensitive data—especially in industries like healthcare, defense, and automotive—needs to be protected from breaches, and intellectual property must be safeguarded to avoid legal issues.<br/><br/>C. Ethical and Legal Concerns</p>
<p>As AI systems begin to make decisions in the design process, there are growing ethical concerns. For example, who is responsible if an AI-designed product fails or causes harm? How do we ensure that AI systems are free from bias and that they make decisions that are in the best interest of society? These questions require careful consideration, and engineers, policymakers, and ethicists must work together to establish clear guidelines and regulations.<br/><br/>D. Job Displacement and Workforce Transition</p>
<p>The increasing automation of tasks traditionally performed by engineers also raises concerns about job displacement. While AI has the potential to augment human capabilities, there is a fear that it could lead to the loss of jobs, particularly in areas of design, testing, and manufacturing. It is crucial for governments and companies to address these concerns by promoting policies that support retraining, reskilling, and a smooth transition into new roles that require higher-level skills.<br/><br/>4. Navigating the Challenges and Embracing AI</p>
<p>So, how can we, as mechanical engineers, navigate these challenges and capitalize on the opportunities AI presents?<br/><br/>A. Embrace Lifelong Learning</p>
<p>The first step is to embrace lifelong learning. Engineers must stay informed about the latest AI developments and actively seek out training opportunities that will enhance their skill set. Companies should invest in professional development programs to help employees adapt to this changing landscape.<br/><br/>B. Foster Collaboration Between Disciplines</p>
<p>Another key to success is collaboration. Engineers, AI experts, and data scientists must work together to ensure that AI systems are being used effectively and ethically. By combining the strengths of both human and machine intelligence, we can create solutions that are not only more efficient but also more innovative.<br/><br/>C. AI as a Tool, Not a Replacement</p>
<p>Lastly, it’s important to view AI not as a replacement for human engineers but as a powerful tool that can enhance our capabilities. AI should be seen as a partner in the design process, capable of handling tasks that are repetitive and data-driven while leaving engineers free to focus on the creative, strategic, and high-level decision-making aspects of their work.<br/><br/>5. Conclusion</p>
<p>In conclusion, we stand at the threshold of a new era in mechanical design engineering—one where AI opens up exciting new possibilities, enhances efficiency, and drives innovation. At the same time, it presents challenges that require us to evolve, adapt, and continue learning.<br/><br/>The opportunities are immense, but so are the challenges. By embracing new skills, fostering collaboration, and integrating AI as a tool rather than a replacement, we can create a future where human ingenuity and artificial intelligence work hand-in-hand to solve some of the world’s most pressing problems.<br/><br/>Thank you.</p>
<h2>cs101</h2>
<p><a href="https://github.com/jackfrued/Python-Core-50-Courses">https://github.com/jackfrued/Python-Core-50-Courses</a> (簡體中文)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/python_2025">https://github.com/mdecycu/python_2025</a> (第1 ~ 19 課繁體中文)</p>
<p><a href="https://people.eecs.berkeley.edu/~ddgarcia/papers/2016-11-29-Party-With-Thousands-The-Most-Popular-Programming-Courses.pdf">最受歡迎的程式課</a></p>
<p><a href="https://cs61a.org/">https://cs61a.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.composingprograms.com/">https://www.composingprograms.com/</a> (<a href="/downloads/composing_programs.pdf">composing_programs.pdf</a>, 2019 version, <a href="https://composingprograms.netlify.app/">簡體中文翻譯</a>)</p>
<p><a href="https://mde.tw/cs101">https://mde.tw/cs101</a> </p>
<h2>Computer</h2>
<p>一、假如使用 Windows 操作系統</p>
<p>顯示副檔名與隱藏檔</p>
<p style="padding-left: 30px;">檔案總管內定並無檢視副檔名與隱藏檔案的設定，若之後所使用的工具並非安裝版，其副檔名並未登錄於操作系統，因此可能無法透過檔案 icon 辨識檔案屬性，最直接的方式就是透過副檔名確認。</p>
<p style="padding-left: 30px;">其次，許多系統工具會使用 Windows 認定的隱藏檔格式 (以 . 開頭)，這些隱藏檔案或隱藏目錄，在 Git 指令操作時非常重要，因此建議將 Windows 檔案總管視窗下的檢視設定中，開啟檢視附檔名與隱藏檔的選項設定。</p>
<p>假如使用 Windows 11 家用版</p>
<p style="padding-left: 30px;">家用版與專業版的差異:</p>
<p style="padding-left: 60px;">家用版僅支援單一 CPU</p>
<p style="padding-left: 60px;">家用版最多支援 128 GB 記憶體</p>
<p style="padding-left: 60px;">家用版無硬碟編碼功能</p>
<p style="padding-left: 60px;">家用版無 <a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-isolation/windows-sandbox/">Windows Sandbox</a></p>
<p style="padding-left: 60px;">家用版無 Remote Desk Top Host - 可以使用 <a href="https://en.wikipedia.org/wiki/VNC">VNC</a> 進行遠端控制 </p>
<p style="padding-left: 60px;">家用版必須自行安裝 Group Policy Editor (gpedit.msc) - 但可以<a href="https://www.itechtics.com/easily-enable-group-policy-editor-gpedit-msc-in-windows-10-home-edition/">自行配置安裝</a></p>
<p style="padding-left: 60px;">家用版無 Hyper-V - 可以使用 <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_6_1">Virtualbox</a> 配置虛擬機</p>
<p>無登入狀態使用 Windows 11</p>
<p style="padding-left: 30px;">新機開啟之後的設定流程，系統要求必須登入微軟帳號才能繼續使用時，可以透過指令輸入，在重新開機設定階段，繞過此一過程。</p>
<p style="padding-left: 30px;">意即，當按下 Shift + F10 (若有 Fn 鍵則需按下 Shift + Fn + F10) 時，系統會跳出命令列視窗，若此時命令列視窗中的目錄，已經跳到 C:\Windows\System32&gt;，則可利用 cd OOBE 之後執行 BYPASSNRO，要求重新開機時繞過此一要求。</p>
<p style="padding-left: 30px;">這些指令都是英文字母，OOBE 是 Out Of Box Experience 的縮寫，而 BYPASSNRO 則是 BYPASS Network Requirement Out-of-box 的意思。</p>
<p style="padding-left: 30px;">在 Windows 11 設置過程，選擇執行 C:\Windows\System32\OOBE\BYPASSNRO 按下 Enter，就會重新開機，之後的設置過程，便會繞過需要登入微軟帳號才能使用 Windows 11 的要求。</p>
<p>自行安裝 gpedit.msc</p>
<p style="padding-left: 30px;">另外，Windows 11 家用版並沒有 gpedit.msc 工具，這是操作系統的群組原則設置工具，若希望關閉微軟強制設定每 42 天必須重製密碼的內建原則，可以先安裝 gpedit.msc 之後再行修改。</p>
<p style="padding-left: 30px;">在搜尋欄位執行 cmd 之後，選擇以管理者身分啟動命令列視窗後，執行下列批次檔指令:</p>
<p>get_gpedit.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
pushd "%~dp0"
dir /b %SystemRoot%\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;Files.txt
dir /b %SystemRoot%\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;&gt;Files.txt
for /f %%i in ('findstr /i . Files.txt 2^&gt;nul') do dism /online /norestart /add-package:"%SystemRoot%\servicing\Packages\%%i"
del Files.txt
pause
</pre>
<p style="padding-left: 30px;">完成之後，可以在搜尋處輸入 gpedit.msc，開啟 Local Group Policy Editor，進入 Windows 設定 - 安全設定 - 帳戶原則 - 密碼原則中，若將密碼最長使用期限的 42 天改為 0，則密碼就可由使用者自行決定最長使用期限，不需要每 42 天被強迫更改。</p>
<p>其他建議:</p>
<p style="padding-left: 30px;">安裝 <a href="https://www.7-zip.org/">7zip</a>、安裝 Firefox，之後儘可能使用可攜套件。</p>
<p>二、假如使用 Ubuntu</p>
<p><a href="https://ubuntu.com/#download-ubuntu">Ubuntu</a> 操作系統分為 Server 與 Desktop 版本，一般機械相關的課程所採用的套件大多僅支援 Windows 版，因此 Ubuntu 或其他 Linux 相關操作系統僅是用來建立輔助用的伺服器，或者用於測試所開發的套件是否能夠在 Ubuntu 環境中執行。</p>
<p>在 Windows 11 操作系統中，利用 <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_6_1">Virtualbox</a> 配置一台 Ubuntu 虛擬機，應該是最方便的使用方式，儘管 <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_6_1">Virtualbox</a> 虛擬機僅能模擬大約 75% 的硬體效能，但只要 4GB Ram 與約 5GB 的硬碟空間就可以啟動，因此建議所使用的 Windows 筆電或桌機至少要有 32GB 的記憶體，以及 512 GB 以上的 SSD 硬碟空間.</p>
<p>三、假如使用 Mac</p>
<p><a href="https://en.wikipedia.org/wiki/MacOS">MacOS</a> 採用 BSD 系列操作系統，屬於 UNiX，因此就機械相關課程的使用情況，與 Ubuntu 或其他 Linux 操作系統相似，大部分情況必須設法配置 Windows 11 虛擬機，或遠端登入到其他 Windows 11 機器，才能執行一些僅支援 Windows 的套件。  </p>
<h3>llama</h3>
<p>在自己的電腦上執行 <a href="https://en.wikipedia.org/wiki/Llama_(language_model)">llama</a>:</p>
<p style="padding-left: 30px;">若電腦有 GPU 可以加快運算，若只有 CPU 也可以執行，以下採一台安裝 Windows 10 的舊電腦進行示範。</p>
<p>安裝 ollama 工具:</p>
<p style="padding-left: 30px;">連線至 <a href="https://ollama.com">https://ollama.com</a>，下載安裝後，可直接執行 llama3.2 (約 2GB):</p>
<p style="padding-left: 30px;">安裝完成後，ollama 位於: C:\Users\使用者帳號\AppData\Local\Programs\Ollama，可以利用命令列視窗或 Powershell 命令列視窗，更換目錄至 Ollama 之後，以 ollama list 列出已經取下的模型，例如: 系統已經取下 llama3.2，則可利用 ollama run llama3.2 執行。</p>
<p style="padding-left: 30px;">各種開放模擬列表: <a href="https://ollama.com/search">https://ollama.com/search</a>，若要取下 deepseek-r1 模型 (約 5.2GB)：</p>
<p style="padding-left: 60px;">cd <span>C:\Users\使用者帳號\AppData\Local\Programs\Ollama</span></p>
<p style="padding-left: 60px;">ollama pull deepseek-r1</p>
<p style="padding-left: 60px;">ollama run deepseek-r1</p>
<p style="padding-left: 60px;">若要中斷對談，使用 ctrl + c，若要跳出 ollama 的語言模型執行，使用 ctrl + d</p>
<p style="padding-left: 30px;">以下畫面在電腦輔助設計室上一代電腦，配置 Intel i7-6700 CPU @ 3.40GHz，32GB 記憶體，安裝 NVIDIA GeForce GTX 950 顯卡電腦上執行:</p>
<p style="padding-left: 30px;"><img caption="false" height="170" src="/images/ollama_on_win10.png" width="200"/></p>
<p>有關 Llama (資料取自 <a href="https://en.wikipedia.org/wiki/Llama_(language_model)">llama</a>):</p>
<p style="padding-left: 30px;"><b>Llama</b><span> </span>(<b>Large Language Model Meta AI</b>, formerly stylized as<span> </span><b>LLaMA</b>) is a family of<span> </span><a href="https://en.wikipedia.org/wiki/Large_language_model" title="Large language model">large language models</a><span> </span>(LLMs) released by<span> </span><a href="https://en.wikipedia.org/wiki/Meta_AI" title="Meta AI">Meta AI</a><span> </span>starting in February 2023.<span> </span>The latest version is Llama 4, released in April 2025.</p>
<p style="padding-left: 30px;">Llama models come in different sizes, ranging from 1 billion to 2 trillion parameters. Initially only a<span> </span><a href="https://en.wikipedia.org/wiki/Foundation_model" title="Foundation model">foundation model</a>,<span> </span>starting with Llama 2, Meta AI released instruction<span> </span><a href="https://en.wikipedia.org/wiki/Fine-tuning_(deep_learning)" title="Fine-tuning (deep learning)">fine-tuned</a><span> </span>versions alongside foundation models.</p>
<p style="padding-left: 30px;">Model weights for the first version of Llama were only available to researchers on a case-by-case basis, under a non-commercial license.<span> </span>Unauthorized copies of the first model were shared via<span> </span><a href="https://en.wikipedia.org/wiki/BitTorrent" title="BitTorrent">BitTorrent</a>.<span> </span>Subsequent versions of Llama were made accessible outside academia and released under licenses that permitted some commercial use.</p>
<p style="padding-left: 30px;">Alongside the release of Llama 3,<span> </span><a href="https://en.wikipedia.org/wiki/Meta_Platforms" title="Meta Platforms">Meta</a><span> </span>added<span> </span><a href="https://en.wikipedia.org/wiki/Virtual_assistant" title="Virtual assistant">virtual assistant</a><span> </span>features to <a href="https://en.wikipedia.org/wiki/Facebook" title="Facebook">Facebook</a> and <a href="https://en.wikipedia.org/wiki/WhatsApp" title="WhatsApp">WhatsApp</a> in select regions, and a standalone website. Both services use a Llama 3 model.</p>
<h3>nginx</h3>
<p>透過 ollama 與 nginx 的結合，在 Web based 介面中使用 llama:</p>
<p>index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8" /&gt;
  &lt;title&gt;Ollama Chat&lt;/title&gt;
  &lt;style&gt;
    body { font-family: sans-serif; margin: 2rem; max-width: 700px; }
    textarea { width: 100%; height: 100px; }
    pre { background: #eee; padding: 1em; white-space: pre-wrap; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;🧠 Chat with LLaMA (via Ollama)&lt;/h1&gt;
  &lt;textarea id="prompt" placeholder="Say something..."&gt;&lt;/textarea&gt;&lt;br/&gt;
  &lt;button onclick="send()"&gt;Send&lt;/button&gt;
  &lt;pre id="output"&gt;&lt;/pre&gt;

  &lt;script&gt;
    async function send() {
      const prompt = document.getElementById("prompt").value;
      document.getElementById("output").textContent = "Thinking...";
      const res = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: "llama3",
          prompt,
          stream: false
        })
      });
      const result = await res.json();
      document.getElementById("output").textContent = result.response;
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>nginx.conf 中對應的 server 設定:<br/><br/></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 80;
    server_name your.domain.com;

    location / {
        root /var/www/html;
        index index.html;
    }

    location /api/ {
        proxy_pass http://localhost:11434/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}</pre>
<p>執行 ollama serve 或使用 ollama run 時，ollama 套件會在 http://localhost:11434 開啟一個 RESTful API 伺服器，讓你可以透過程式或前端介面與模型互動。</p>
<p>因此執行 ollama run llama3.1:latest 之後，再伺服 nginx 的 index.html 後，就可以從 WWW 伺服器連接頁面上，與 llama 語言模型系統對話。</p>
<p>若 ollama 所執行的模型支援 vision 功能，則可以進一步延伸 index.html，使用者可以上傳圖片與 AI 模型對話</p>
<p>index_vision.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8" /&gt;
  &lt;title&gt;Ollama Chat + Image/File Upload&lt;/title&gt;
  &lt;style&gt;
    body { font-family: sans-serif; max-width: 800px; margin: 2rem auto; }
    textarea { width: 100%; height: 80px; }
    .chatbox { white-space: pre-wrap; background: #f4f4f4; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; }
    .file-label { margin-top: 0.5rem; display: block; font-weight: bold; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;🧠 Chat with LLaMA + Upload Image/Text&lt;/h2&gt;
  
  &lt;div class="chatbox" id="chatlog"&gt;&lt;/div&gt;

  &lt;textarea id="prompt" placeholder="Say something..."&gt;&lt;/textarea&gt;&lt;br&gt;
  
  &lt;label class="file-label"&gt;Upload image (.png/.jpg) or text (.txt/.md):&lt;/label&gt;
  &lt;input type="file" id="fileInput" accept=".png,.jpg,.jpeg,.txt,.md"&gt;&lt;br&gt;&lt;br&gt;
  
  &lt;button onclick="send()"&gt;Send&lt;/button&gt;

  &lt;script&gt;
    const chatlog = document.getElementById("chatlog");

    async function send() {
      const promptInput = document.getElementById("prompt").value.trim();
      const fileInput = document.getElementById("fileInput");
      if (!promptInput &amp;&amp; fileInput.files.length === 0) return;

      let userMessage = promptInput || "[No prompt]";
      let fullPrompt = promptInput;

      // 檔案處理
      if (fileInput.files.length &gt; 0) {
        const file = fileInput.files[0];
        const type = file.type;

        if (type.startsWith("image/")) {
          const base64 = await fileToBase64(file);
          fullPrompt += `\n\n[以下為圖片 base64 編碼：]\n${base64}`;
        } else if (type === "text/plain" || file.name.endsWith(".md")) {
          const text = await file.text();
          fullPrompt += `\n\n[以下為文件內容：]\n${text}`;
        } else {
          appendChat("❌ Unsupported file type.");
          return;
        }
      }

      appendChat("🧑‍💻 You:\n" + userMessage);
      appendChat("🤖 LLaMA is thinking...");

      const res = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: "llama3",
          prompt: fullPrompt,
          stream: false
        })
      });

      const result = await res.json();
      updateLastBotReply("🤖 LLaMA:\n" + result.response);
    }

    function appendChat(text) {
      const div = document.createElement("div");
      div.className = "chatbox";
      div.textContent = text;
      chatlog.appendChild(div);
      window.scrollTo(0, document.body.scrollHeight);
    }

    function updateLastBotReply(text) {
      const boxes = document.getElementsByClassName("chatbox");
      boxes[boxes.length - 1].textContent = text;
    }

    function fileToBase64(file) {
      return new Promise((resolve, reject) =&gt; {
        const reader = new FileReader();
        reader.onload = () =&gt; resolve(reader.result.split(",")[1]);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>或直接將 ollama 結合 <a href="https://www.openwebui.com/">https://www.openwebui.com/</a> 提供 Web based 對話進階功能。</p>
<h1>Homework</h1>
<p>HW1:</p>
<p style="padding-left: 30px;">請將程式碼存放在個人作業倉儲中的 python 目錄後，利用程式連結完成下列任務:</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Faround1.json">around1</a>, <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Faround2.json">around2</a>, <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Faround3.json">around3</a>, <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Faround4.json">around4</a></p>
<p>HW2:</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py">Brython_robot</a> 程式，讓機器人可以採水平巡邏方式，走過每一個區域。</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py">Brython_robot</a> 程式，讓機器人可以採上下垂直巡邏方式，走過每一個區域。</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/9d55811467e411eb89f74171d8a586ae9f1a96aa/brython_robot_free_walk.py">機器人自由行</a> 程式，加入機器人撞牆警示。</p>
<p>HW3:</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py">Brython_robot</a> 程式，讓機器人可以與<a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Fharvest1.json&amp;editor=python%2Fharvest1_east_west.py">機器人收割程式</a>的水平採收方式相同。</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py">Brython_robot</a> 程式，讓機器人可以與<a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Fharvest1.json&amp;editor=python%2Fharvest1.py">機器人收割程式</a>的上下垂直採收方式相同。</p>
<p>HW4:</p>
<p style="padding-left: 30px;">請修改 <a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py">Brython_robot</a> 程式，讓機器人可以與<a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=worlds%2Ftutorial_en%2Fharvest3.json&amp;editor=python%2Fharvest1_class_ex3.py">機器人收割程式</a>的採收與播種方式相同。</p>
<p></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Topics</h1>
<p>電腦輔助設計室電腦硬體與網路使用介紹</p>
<p style="padding-left: 30px;">C: 為 SSD，網路協定可以自行決定使用 IPv4 或 IPv6 (若使用純 IPv6 則必須設定 Proxy 才能連結到 github.com 以及僅支援 IPv4 協定的網站) </p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: w87x8do</p>
<p>下載可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/portable_2026.7z">portable_2026.7z</a> (387MB)</p>
<p style="padding-left: 60px;">解開壓縮後，雙點擊 start_miniconda3.bat 啟動可攜系統，雙點擊 stop.bat 關閉可攜系統。</p>
<p style="padding-left: 60px;">可攜系統啟動後，在命令列執行 conda activate y:\envs\cmsimde 可進入能執行 CMSiMDE 的環境。</p>
<p style="padding-left: 60px;">若希望可攜系統啟動直接進入 cmsimde 環境，可將 start_miniconda3.bat 檔案中第 98 行: call "%CONDA_ROOT%\Scripts\activate.bat" %ENV_NAME% 更換為 call "%CONDA_ROOT%\Scripts\activate.bat" %Disk%:\envs\cmsimde。</p>
<p>各學員自行<a href="https://docs.github.com/zh/get-started/start-your-journey/creating-an-account-on-github">建立 Github 帳號</a></p>
<p>說明如何建立分組倉儲 Template</p>
<p>學習如何開啟可攜套件、關閉可攜套件</p>
<p style="padding-left: 30px;">利用 Python 執行設計運算及維護倉儲與網站內容</p>
<p style="padding-left: 30px;">Windows <a href="https://hackmd.io/@peterju/B1pUqd-5c">Batch file</a> 與 <a href="https://link.springer.com/book/10.1007/978-1-4842-7064-6">Powershell</a> 應用 </p>
<p><a href="https://classroom.github.com/">Github Classroom</a> 上的分組網站: <a href="https://github.com/mdecp2025">https://github.com/mdecp2025</a> </p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/">Github Classroom</a> 是一套 Web based 工具，功能在於簡化採用 Github 倉儲進行教學與協同分組的工作 </p>
<p style="padding-left: 30px;">各組組長建立 <a href="https://classroom.github.com/">Github Classroom</a> 分組團隊，各組取得分組倉儲 </p>
<p>學習如何在近端電腦與 <a href="https://github.com/features/codespaces">Codespaces</a> 上維護分組倉儲內容</p>
<p style="padding-left: 30px;">近端: Github Token 與 SSH (Putty、Registry (<a href="https://learn.microsoft.com/zh-tw/troubleshoot/windows-server/performance/windows-registry-advanced-users">中文版</a>、<a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users">英文版</a>)應用)  </p>
<p>利用 <a href="https://mde.tw/cp2025/reeborg">Reeborg</a> 學習 Python 基本語法</p>
<hr/>
<h4>計算機程式課程主題總覽</h4>
<h4>課程簡介</h4>
<p>本課程以實作為導向，循序漸進學習 <strong>Python</strong>、<strong>JavaScript</strong>、<strong>HTML</strong>、<strong>CSS</strong> 等現代網頁與程式語言，最終應用於 <strong>Reeborg 機器人程式開發</strong>。內容設計結合理論與實作，強調程式邏輯、問題解決與跨語言應用能力。</p>
<ul>
<li>從零基礎學習程式語言的基本結構與語法</li>
<li>掌握網頁技術，為互動式機器人程式設計打下基礎</li>
<li>專題實作，應用於 Reeborg’s World 機器人操作與挑戰任務</li>
</ul>
<h4>課程主題與詳細內容</h4>
<h4>1. Python 基礎與 Reeborg 機器人程式設計</h4>
<ul>
<li><strong>Python 語言簡介：</strong> 特色、應用領域、開發環境介紹</li>
<li><strong>基本語法：</strong> 變數、資料型態、運算子、輸入與輸出</li>
<li><strong>流程控制：</strong> 條件判斷 (<code>if</code>, <code>elif</code>, <code>else</code>)、迴圈 (<code>while</code>, <code>for</code>)</li>
<li><strong>函式與模組：</strong> 函式定義與呼叫、自訂功能、模組導入</li>
<li><strong>Reeborg’s World 操作：</strong>
<ul>
<li>基本指令 (<code>move()</code>, <code>turn_left()</code>, <code>take()</code>, <code>put()</code>)</li>
<li>感測器判斷 (<code>front_is_clear()</code>, <code>wall_in_front()</code>, <code>object_here()</code>, <code>at_goal()</code>)</li>
<li>將 Python 程式邏輯應用於控制機器人走迷宮、撿物、解任務</li>
</ul>
</li>
<li><strong>實作練習：</strong> 關卡挑戰、流程規劃、錯誤偵錯與修正</li>
</ul>
<h4>2. JavaScript 程式設計基礎</h4>
<ul>
<li><strong>JavaScript 角色：</strong> 前端網頁互動語言，與 Python 差異與應用</li>
<li><strong>基本語法：</strong> 變數 (<code>let</code>, <code>const</code>)、資料型態、運算子、輸出 (<code>console.log()</code>)</li>
<li><strong>流程控制：</strong> 條件 (<code>if</code>, <code>else</code>)、迴圈 (<code>for</code>, <code>while</code>)</li>
<li><strong>函式與 ES6 新語法：</strong> 函式宣告、箭頭函式 (<code>() =&gt; {}</code>)</li>
<li><strong>陣列與物件：</strong> 基本操作、方法應用</li>
<li><strong>與網頁互動：</strong> 認識 DOM、事件處理等（為後續進階鋪路）</li>
<li><strong>小專題：</strong> 建立簡單計算機或互動網頁按鈕</li>
</ul>
<h4>3. HTML 基礎 - 建構網頁內容</h4>
<ul>
<li><strong>HTML 結構：</strong> 了解 <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code> 等標籤</li>
<li><strong>常用標籤：</strong> <code>&lt;h1&gt;~&lt;h6&gt;</code> 標題、<code>&lt;p&gt;</code> 段落、<code>&lt;a&gt;</code> 連結、<code>&lt;img&gt;</code> 圖片、<code>&lt;ul&gt;</code>/<code>&lt;ol&gt;</code> 列表、<code>&lt;table&gt;</code> 表格</li>
<li><strong>表單與輸入：</strong> <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;button&gt;</code> 等</li>
<li><strong>結構化分區：</strong> <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code> 等</li>
<li><strong>專案實作：</strong> 製作個人簡歷網頁、Reeborg 世界說明頁等</li>
</ul>
<h4>4. CSS 樣式設計 - 美化網頁版面</h4>
<ul>
<li><strong>CSS 基本語法：</strong> 選擇器、屬性、值的語法結構</li>
<li><strong>常用樣式：</strong> 顏色 (<code>color</code>、<code>background</code>)、字型 (<code>font-size</code>、<code>font-family</code>)、邊框 (<code>border</code>), 間距 (<code>margin</code>, <code>padding</code>)</li>
<li><strong>版面配置：</strong> <code>display</code>、<code>flex</code>、<code>grid</code> 基礎</li>
<li><strong>RWD 響應式設計：</strong> 讓你的網頁適合不同裝置</li>
<li><strong>CSS 與 HTML 整合：</strong> 內嵌樣式、內部樣式表、外部 CSS 檔案</li>
<li><strong>美化 Reeborg 機器人專案網頁：</strong> 實作練習</li>
</ul>
<h4>5. 綜合應用 - Reeborg 機器人專案開發</h4>
<ul>
<li><strong>專案規劃與團隊合作：</strong> 需求分析、分工合作</li>
<li><strong>跨語言整合：</strong> 利用 Python 控制邏輯、JavaScript 增強互動、HTML/CSS 展示結果</li>
<li><strong>打造專屬 Reeborg 世界：</strong> 設計自訂任務與挑戰</li>
<li><strong>成果展示：</strong> 發表與互評，分享學習心得</li>
</ul>
<h4>學習建議與資源</h4>
<ul>
<li>多加練習與嘗試，遇到困難主動討論與尋找資料</li>
<li>推薦學習網站：<a href="https://reeborg.ca/" target="_blank">Reeborg’s World</a>、<a href="https://www.w3schools.com/" target="_blank">W3Schools</a>、<a href="https://developer.mozilla.org/zh-TW/" target="_blank">MDN Web Docs</a></li>
<li>建議每週規劃自主練習與小專案，培養實作與解決問題能力</li>
<li>記錄學習歷程，定期回顧與修正</li>
</ul>
<h2>Git</h2>
<p>假如您還沒有 Github 帳號，請馬上<a href="https://github.com/signup">建立一個</a>。</p>
<p><span style="background-color: #ffff00;">為何計算機程式課程要使用 Git 與 Github?</span></p>
<p>計算機程式課程（軟體開發）使用 Git 與 GitHub 主要有以下幾個原因：</p>
<ol>
<li>版本控制: Git 是一套分散式的版本控制系統，能記錄每一個檔案的修改歷程。這樣就算不小心改壞了某一個版本的程式，也能隨時回復到以前的版本，而且在協同設計流程中，可以追蹤那一個使用者改了那些內容、什麼時候改的，可以快速釐清許多議題。</li>
<li>團隊協作: 多個開發者可以同時對同一個專案進行開發，透過分支（branch）機制，各自開發新功能、修 bug，最後再合併（merge）到主分支，避免互相覆蓋程式碼。</li>
<li>雲端備份與分享: GitHub 是基於 Git 的雲端代管平台，可以將本地的 Git 專案上傳到雲端，不怕資料遺失。也方便將程式碼公開或私下分享給其他人。</li>
<li>問題追蹤與管理: GitHub 除了儲存程式碼，還提供 issue、pull request 等工具，有助於追蹤 bug、討論功能、審查程式碼，提高專案管理效率。</li>
<li>開放原始碼與社群合作: 許多開放原始碼專案都放在 GitHub，任何人都能貢獻程式碼，促進社群協作與學習。</li>
<li>總結：使用 Git 和 GitHub 可以讓程式開發更有組織、更安全、更容易協作與管理，也方便與他人分享、學習與成長。</li>
</ol>
<p><span style="background-color: #ffff00;">請舉實際的計算機程式開發案例，說明如何操作 Git 與 Github，以便取得程式開發流程的便利與優勢。</span></p>
<p>Git 與 GitHub 操作案例說明</p>
<h4>Git 與 GitHub 實際操作案例：多人開發 ToDo List 網站</h4>
<div>
<h4>1. 專案初始化與上傳</h4>
<div>
<h4><strong>步驟：</strong></h4>
<ol>
<li>在本機建立專案資料夾，初始化 Git：
<pre><code>git init</code></pre>
</li>
<li>新增檔案（如 <code>index.html</code>、<code>app.js</code>），並提交第一個版本：
<pre><code>git add .<br/>git commit -m "Initial commit"</code></pre>
</li>
<li>在 GitHub 建立新 repository，然後將本機專案推送到遠端：
<pre><code>git remote add origin https://github.com/username/todo-app.git<br/>git push -u origin master</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 所有程式碼都有歷史紀錄，且安全備份於雲端。</p>
</div>
</div>
<div>
<h4>2. 分支開發新功能</h4>
<div>
<p><strong>情境：</strong>小明負責開發「新增待辦事項」功能。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>建立新分支：
<pre><code>git checkout -b feature/add-todo-item</code></pre>
</li>
<li>實作功能並提交：
<pre><code>git add .<br/>git commit -m "Add feature to create todo item"</code></pre>
</li>
<li>推送分支到 GitHub：
<pre><code>git push origin feature/add-todo-item</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 各自分支開發，互不干擾，降低衝突風險。</p>
</div>
</div>
<div>
<h4>3. Pull Request（合併請求）與 Code Review</h4>
<div class="step">
<p><strong>情境：</strong>小明開發完成，欲合併新功能到主分支。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>在 GitHub 上建立 Pull Request，描述功能內容。</li>
<li>其他團隊成員審查程式碼，提出建議或修正。</li>
<li>經討論無誤後，管理員合併 PR。</li>
</ol>
<p><strong>優勢：</strong> 強化程式品質與團隊溝通，每次合併都有討論紀錄。</p>
</div>
</div>
<div>
<h4>4. 處理 Bug 與 Issue 追蹤</h4>
<div class="step">
<p><strong>情境：</strong>使用者發現「無法刪除待辦事項」的 bug。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>在 GitHub issue 區提出 bug 報告。</li>
<li>團隊分配成員修正，建立 <code>fix/delete-todo-bug</code> 分支。</li>
<li>修正後提交、發 PR、review、合併。</li>
</ol>
<p><strong>優勢：</strong> 所有 bug、功能需求有明確記錄，修正過程透明。</p>
</div>
</div>
<div>
<h4>5. 版本回溯與復原</h4>
<div class="step">
<p><strong>情境：</strong>新功能導致主分支出錯。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>透過 Git log 查找歷史版本：
<pre><code>git log</code></pre>
</li>
<li>回復到上一個穩定版本：
<pre><code>git checkout &lt;commit-id&gt;</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 不怕程式「改壞」，可隨時回復，輕鬆追蹤誰做了什麼修改。</p>
</div>
</div>
<div>
<h4>總結</h4>
<p>Git 與 GitHub 提供完整的版本控制、團隊協作、問題追蹤、程式碼審查與備份機制，讓開發流程更有條理，大幅提升開發效率與品質。不論團隊或個人開發，都能享有回溯、備份、管理等多重好處。</p>
</div>
<h3>Git_ex1</h3>
<h4>Reeborg 機器人 Python 開發流程與 Git/GitHub 協作範例</h4>
<h4>階段一：基礎 Python 與 Reeborg 指令</h4>
<p>初學者可直接用 Python 撰寫簡單的 <a href="https://mde.tw/cp2025/reeborg/">Reeborg 機器人程式</a>，例如讓機器人向前走數步、左轉、撿物件：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">move()
move()
turn_left()
move()
if object_here():
    take()
</pre>
<h4>階段二：加入函式與三人協同開發</h4>
<div class="collab"><strong>協作情境：</strong>三位組員（A、B、C）各自開發一段行走任務，然後將重複動作寫成函式，合併到專案。</div>
<ol>
<li><strong>組員 A:</strong> 讓機器人前進 3 格
<pre>for i in range(3):
    move()
</pre>
</li>
<li><strong>組員 B:</strong> 機器人轉 2 次左
<pre>for i in range(2):
    turn_left()
</pre>
</li>
<li><strong>組員 C:</strong> 機器人檢查物件並撿取
<pre>if object_here():
    take()
</pre>
</li>
</ol>
<p><span class="tip">協作流程：</span>三人各自建立分支（feature/A, feature/B, feature/C），在 GitHub 上合併 Pull Request，最後由主分支整合。</p>
<h4>Git 基本指令與說明</h4>
<ul>
<li><strong>Step 1：初始化本地倉庫</strong>
<pre>git init
    </pre>
<span>在專案資料夾裡執行，建立 Git 管理的本地倉庫。</span></li>
<li><strong>Step 2：加入遠端 GitHub 倉庫</strong>
<pre>git remote add origin https://github.com/你的帳號或組織/專案名稱.git
    </pre>
<span>將本地倉庫連結到 GitHub 上的遠端 repository。</span></li>
<li><strong>Step 3：建立並切換到功能分支</strong>
<pre>git checkout -b feature/A        # 組員A
git checkout -b feature/B        # 組員B
git checkout -b feature/C        # 組員C
    </pre>
<span>每位組員建立自己的功能分支，分工開發。</span></li>
<li><strong>Step 4：修改程式並加入暫存區</strong>
<pre>git add reeborg.py
    </pre>
<span>將變更過的檔案加入暫存區，準備提交。</span></li>
<li><strong>Step 5：提交更動</strong>
<pre>git commit -m "描述這次開發的內容"
    </pre>
<span>將暫存區的變更提交到本地倉庫。</span></li>
<li><strong>Step 6：推送分支到 GitHub</strong>
<pre>git push -u origin feature/A        # 組員A
git push -u origin feature/B        # 組員B
git push -u origin feature/C        # 組員C
    </pre>
<span>把每個人的分支推到遠端 GitHub。</span></li>
<li><strong>Step 7：建立 Pull Request 並審查合併</strong> <br/> <span>到 GitHub 網站上建立 Pull Request（PR），請其他組員 code review，審查無誤後合併到主分支（main）。</span></li>
<li><strong>Step 8：將最新主分支同步回本地</strong>
<pre>git checkout main
git pull
    </pre>
<span>確保本地 main 跟遠端同步。</span></li>
</ul>
<h4>加入共用函式</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def turn(times):
    for i in range(times):
        turn_left()

def new_move(steps):
    for i in range(steps):
        move()
</pre>
<pre>階段三：重構與加入迴圈、條件與函式應用</pre>
<p>將重複採收動作寫成 <code>harvest_one_row()</code> 函式，結合前進與轉彎，流程更清晰。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def harvest_one_row():
    while object_here():
        take()
    else:
        move()
</pre>
<h4>階段四：導入 class，建立泛用 Reeborg 機器人控制架構</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class ReeborgBot:
    def turn(self, times):
        for i in range(times):
            turn_left()
    def move_steps(self, steps):
        for i in range(steps):
            move()
    def harvest_one_row(self):
        while object_here():
            take()
        else:
            move()
    def harvest_field(self, rows, row_length):
        for i in range(rows):
            for j in range(row_length):
                self.harvest_one_row()
            if i != rows - 1:
                self.turn(3)
                self.move_steps(1)
                self.turn(3)
                self.move_steps(1)

# 使用範例
bot = ReeborgBot()
bot.move_steps(2)
turn_left()
bot.move_steps(2)
bot.harvest_field(3, 6)
</pre>
<pre>協作開發流程與 Git/GitHub 應用摘要</pre>
<ol>
<li><b>git init</b>：建立本地專案。</li>
<li><b>git branch feature/A</b>、<b>git branch feature/B</b>、<b>git branch feature/C</b>：三位組員各自建立分支（或用 <b>git checkout -b</b> 一次完成）。</li>
<li><b>git add</b>、<b>git commit</b>、<b>git push</b>：將各自更動上傳到 GitHub。</li>
<li><b>Pull Request</b>：在 GitHub 建立 PR，進行 code review 與合併。</li>
<li>遇重複邏輯，抽象為函式，用新分支推送與合併。</li>
<li>最後導入 class，建立泛用控制架構，提升可維護性與擴充性。</li>
</ol>
<h4>結語</h4>
<p>本例展示 Python 基礎語法、函式、類別應用，以及如何善用 Git/GitHub 進行協同開發，讓團隊程式碼更有架構、易於管理與擴展。</p>
<h3>Git_ex2</h3>
<h4>三人協同開發 Reeborg 程式：Git/GitHub 詳細流程與指令</h4>
<h4>專案設計演進與協作分工</h4>
<ol>
<li><b>階段一：初始設計（三人各自撰寫基本功能）</b>
<ul>
<li>Alice：負責機器人移動與左轉基本動作</li>
<li>Bob：設計撿取物件的邏輯</li>
<li>Carol：設計主程式流程與方向判斷</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Alice
move()
move()
turn_left()
move()

# Bob
if object_here():
    take()

# Carol
while not is_facing_north():
    turn_left()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>三人各自建立分支並上傳初步程式片段</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/move  # Alice
git checkout -b feature/take  # Bob
git checkout -b feature/dir   # Carol

git add reeborg.py
git commit -m "初步功能"
git push -u origin feature/move  # Alice
git push -u origin feature/take  # Bob
git push -u origin feature/dir   # Carol</pre>
</li>
<li><b>階段二：重複迴圈設計（逐步將動作包裝為迴圈）</b>
<ul>
<li>Alice：將移動與轉向包裝進 for 迴圈</li>
<li>Bob：將撿取物件行為放入 while 迴圈</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Alice
for i in range(3):
    move()

for i in range(2):
    turn_left()

# Bob
while object_here():
    take()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>各自於分支更新程式並提交</li>
</ul>
</ul>
<pre>git add reeborg.py
git commit -m "加入重複迴圈"
git push
      </pre>
</li>
<li><b>階段三：Function 封裝設計（將重複邏輯抽象為函式）</b>
<ul>
<li>Alice：設計 <code>new_move</code>、<code>turn</code>、<code>turn_right</code></li>
<li>Bob：設計 <code>harvest_one_row</code>，用 global 記錄物件數</li>
<li>Carol：設計 <code>is_facing_east</code> 與主流程</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def turn(n):
    for i in range(n):
        turn_left()

def turn_right():
    for i in range(3):
        turn_left()

def new_move(n):
    for i in range(n):
        move()

def harvest_one_row():
    global object_taken
    while object_here() and object_taken &lt; 36:
        take()
        object_taken += 1
    if object_taken &lt; 36:
        move()

def is_facing_east():
    count = 0
    while not is_facing_north():
        turn_left()
        count += 1
        if count == 4:
            break
    turn(3)
    return True
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>各自於分支完成函式開發</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git add reeborg.py
git commit -m "完成 function 封裝"
git push</pre>
</li>
<li><b>階段四：導入 class-based 設計（最終彈性架構）</b>
<ul>
<li>Alice、Bob、Carol 協作將函式整合為 class，提升可維護性</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class ReeborgBot:
    def __init__(self):
        self.object_taken = 0

    def turn(self, n):
        for i in range(n):
            turn_left()
    
    def turn_right(self):
        for i in range(3):
            turn_left()

    def new_move(self, n):
        for i in range(n):
            move()
    
    def harvest_one_row(self):
        while object_here() and self.object_taken &lt; 36:
            take()
            self.object_taken += 1
        if self.object_taken &lt; 36:
            move()
    
    def is_facing_east(self):
        count = 0
        while not is_facing_north():
            turn_left()
            count += 1
            if count == 4:
                break
        self.turn(3)
        return True

    def harvest_field(self):
        self.new_move(2)
        self.turn(1)
        self.new_move(2)
        done = False
        while self.is_facing_east() and not done:
            for _ in range(2):
                for _ in range(6):
                    self.harvest_one_row()
                    if self.object_taken &gt;= 36:
                        done = True
                        break
                if done: break
                for _ in range(2):
                    self.turn(1)
                    move()
                for _ in range(6):
                    self.harvest_one_row()
                    if self.object_taken &gt;= 36:
                        done = True
                        break
                if done: break
                for _ in range(2):
                    self.turn_right()
                    move()
            if self.object_taken &gt;= 36:
                print("task completed!")
                break

# 使用範例
bot = ReeborgBot()
bot.harvest_field()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>協作於 feature/class-based 分支整合 class 架構</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/class-based
# 合併 Alice/Bob/Carol 分支或直接在此分支重構
git add reeborg.py
git commit -m "整合 class-based 架構"
git push -u origin feature/class-based</pre>
</li>
</ol>
<h4>專案開發分工摘要表</h4>
<table>
<tbody>
<tr>
<th>組員</th>
<th>負責內容</th>
<th>Git 分支名稱</th>
</tr>
<tr>
<td>Alice</td>
<td>基本移動與轉向（<code>new_move</code>、<code>turn</code>、<code>turn_right</code>）</td>
<td>feature/move-turn</td>
</tr>
<tr>
<td>Bob</td>
<td>收成邏輯（<code>harvest_one_row</code>、<code>object_taken</code>）</td>
<td>feature/harvest</td>
</tr>
<tr>
<td>Carol</td>
<td>方向判斷與主流程（<code>is_facing_east</code>、主執行流程）</td>
<td>feature/main-loop</td>
</tr>
</tbody>
</table>
<h4>GitHub 操作 Step by Step</h4>
<ol>
<li><b>由一位組員（如 Alice）新建 repo</b>（如 <code>reeborg-harvest</code>）</li>
<li><b>本地初始化：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone https://github.com/your-org/reeborg-harvest.git
cd reeborg-harvest</pre>
</li>
<li><b>建立主分支 main：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b main
git push -u origin main</pre>
</li>
<li><b>三位組員各自分出功能分支：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/move-turn      # Alice
git checkout -b feature/harvest        # Bob
git checkout -b feature/main-loop      # Carol</pre>
</li>
<li><b>推送分支到遠端：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git push -u origin feature/move-turn      # Alice
git push -u origin feature/harvest        # Bob
git push -u origin feature/main-loop      # Carol</pre>
</li>
<li><b>組員於各自分支開發程式並提交：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git add reeborg.py
git commit -m "功能/重構/修正說明"
git push</pre>
</li>
<li><b>建立 Pull Request（PR）並 Code Review：</b>
<ul>
<li>於 GitHub 建立 PR，標明合併分支、審查人員、功能說明</li>
<li>進行 code review，提出建議與修正</li>
<li>審查通過後合併 PR（Merge pull request）</li>
</ul>
</li>
<li><b>main 分支同步至本地：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout main
git pull</pre>
</li>
</ol>
<h4>後續協作建議</h4>
<ul>
<ul>
<li>每次新增功能或修正前，請先拉新分支，勿直接在 main 分支作業：</li>
</ul>
</ul>
<pre>git checkout -b feature/新功能</pre>
<ul>
<ul>
<li>合併前先同步主分支，解決衝突後再 push：</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git pull origin main
# 如有衝突，解決後再
git add .
git commit -m "解決衝突"
git push</pre>
<ul>
<li>在 Pull Request 詳細描述修改內容與測試方式，方便審查。</li>
<li>善用 <code>git log</code>、<code>git status</code>、<code>git diff</code> 檢查歷史與變更。</li>
</ul>
<h4>常用 Git 指令說明</h4>
<ul>
<li><code>git checkout -b 分支名</code>：從目前分支新建並切換到分支</li>
<li><code>git add 檔名</code>：加入暫存區，準備提交</li>
<li><code>git commit -m "訊息"</code>：提交更動，寫下本次修改說明</li>
<li><code>git push -u origin 分支名</code>：推送分支到遠端</li>
<li><code>git pull</code>：拉下遠端最新更動並合併</li>
<li><code>git merge 分支名</code>：將指定分支合併到目前分支</li>
<li><code>git status</code>：顯示目前狀態、尚未提交的變更</li>
<li><code>git log</code>：查詢提交歷史</li>
<li><code>git diff</code>：顯示檔案內容變更差異</li>
</ul>
<h4>結論</h4>
<p>本範例展現 Reeborg 機器人從最簡單設計、逐步進化至 class-based 架構的過程，以及三人協同開發的 Git/GitHub 分支工作流。遵循此流程能大幅提升團隊協作、程式碼品質與可維護性。</p>
<h2>Python</h2>
<p>Learn Python with <a href="https://mde.tw/reeborg">Reeborg</a></p>
<p style="padding-left: 30px;"><a href="https://reeborg.ca/docs/en/">https://reeborg.ca/docs/en/</a></p>
<p style="padding-left: 30px;"><a href="https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/">https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/loukhin/Reeborg">https://github.com/loukhin/Reeborg</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/aroberge/reeborg-howto">https://github.com/aroberge/reeborg-howto</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/LeeRenJie/100-days-of-code-in-python">https://github.com/LeeRenJie/100-days-of-code-in-python</a></p>
<p style="padding-left: 30px;"><a href="http://repo.darmajaya.ac.id/4765/1/The%20Self-Taught%20Programmer_%20The%20Definitive%20Guide%20to%20Programming%20Professionally%20%28%20PDFDrive%20%29.pdf">Self-taught programmer</a></p>
<p>Python code for Artificial Intelligence - Foundations of Computational Agents</p>
<p style="padding-left: 30px;"><a href="https://artint.info/AIPython/aipython.pdf">https://artint.info/AIPython/aipython.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/387024839_Programming_AI_with_Python">Program AI with Python</a></p>
<p style="padding-left: 30px;"><a href="https://www.tutorialspoint.com/artificial_intelligence_with_python/artificial_intelligence_with_python_tutorial.pdf">AI with Python</a></p>
<p style="padding-left: 30px;"><a href="https://web.stanford.edu/class/archive/cs/cs106a/cs106a.1208/lectures/26-Intro-to-AI/26-Intro-to-AI.pdf">Using Python for Artificial Intelligence</a></p>
<p style="padding-left: 30px;"><a href="https://python-course.eu/books/bernd_klein_python_and_machine_learning_a4.pdf">Machine Learning with Python Tutorial</a></p>
<p>Genetic Algorithms:</p>
<p style="padding-left: 30px;"><a href="/downloads/GA/ga_1.py">ga_1.py</a> (from <a href="https://www.geeksforgeeks.org/genetic-algorithms/">https://www.geeksforgeeks.org/genetic-algorithms/</a>)</p>
<p style="padding-left: 30px;"><a href="https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb">https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f">https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f</a></p>
<p style="padding-left: 30px;">Apply GA to <a href="https://github.com/mdecycu/cs101">https://github.com/mdecycu/cs101</a></p>
<h3>Python_ex1</h3>
<h4>Python 初學者學習指引</h4>
<h4>一、學習步驟建議</h4>
<ol>
<li>認識 Python 的應用與特色。</li>
<li>選擇合適的學習平台，例如 <a href="https://reeborg.ca" target="_blank">Reeborg’s World</a>。</li>
<li>熟悉 Python 的基本語法與執行方式。</li>
<li>從簡單題目逐步挑戰更進階的練習。</li>
<li>多做實作練習，並觀察程式執行結果。</li>
</ol>
<h4>二、Python 必學基本語法</h4>
<ul>
<li><strong>變數與資料型態：</strong>
<pre><code>x = 10
name = "Alice"
is_ok = True</code></pre>
</li>
<li><strong>輸出：</strong>
<pre><code>print("Hello, world!")</code></pre>
</li>
<li><strong>運算子：</strong>
<ul>
<li>數學運算：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>//</code>、<code>%</code></li>
<li>比較運算：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code></li>
<li>邏輯運算：<code>and</code>、<code>or</code>、<code>not</code></li>
</ul>
</li>
<li><strong>條件判斷：</strong>
<pre><code>if x &gt; 0:
    print("正數")
else:
    print("非正數")</code></pre>
</li>
<li><strong>迴圈：</strong>
<pre><code>while 條件:
    # 重複執行內容
</code></pre>
</li>
<li><strong>函式：</strong>
<pre><code>def greet():
    print("Hi!")</code></pre>
</li>
<li><strong>縮排與註解：</strong>
<pre><code># 這是註解
if True:
    print("這行有縮排")</code></pre>
</li>
</ul>
<h4>三、Reeborg’s World 學習重點</h4>
<ul>
<li><strong>基本指令：</strong>
<ul>
<li><code>move()</code>：前進一格</li>
<li><code>turn_left()</code>：左轉</li>
<li><code>take()</code>：撿起物品</li>
<li><code>put()</code>：放下物品</li>
</ul>
</li>
<li><strong>感測與判斷：</strong>
<ul>
<li><code>front_is_clear()</code>：前方有路</li>
<li><code>wall_in_front()</code>：前方有牆</li>
<li><code>object_here()</code>：目前格子有物品</li>
</ul>
</li>
<li><strong>條件與迴圈應用：</strong>
<pre><code>if front_is_clear():
    move()
else:
    turn_left()

while not at_goal():
    move()</code></pre>
</li>
<li><strong>自訂函式：</strong>
<pre><code>def turn_right():
    turn_left()
    turn_left()
    turn_left()</code></pre>
</li>
</ul>
<h4>四、小結</h4>
<ul>
<li>先學會基本語法與程式邏輯，再用 Reeborg 練習解題。</li>
<li>多做題目，觀察執行結果與錯誤訊息，提升解決問題能力。</li>
<li>熟悉條件判斷、迴圈、函式，是學好 Python 的基礎。</li>
</ul>
<hr/>
<h4>Python 初學者超詳細學習指引<br/><small>（以 Reeborg 機器人練習為例）</small></h4>
<h4>一、Python 學習流程與心法</h4>
<ol>
<li><strong>認識 Python</strong>
<ul>
<li>Python 是一種簡潔、易讀、用途廣泛的程式語言。</li>
<li>常用於資料分析、人工智慧、網頁開發、自動化等領域。</li>
<li>學好基礎語法，日後可延伸應用到許多不同領域。</li>
</ul>
</li>
<li><strong>選擇學習工具</strong>
<ul>
<li>初學推薦 <a href="https://reeborg.ca/" target="_blank">Reeborg’s World</a>，直接練習程式，免安裝。</li>
<li>也可用 Python 官方網站下載安裝，或用線上編輯器（如 repl.it、Google Colab）。</li>
</ul>
</li>
<li><strong>循序漸進學習</strong>
<ul>
<li>先熟悉「變數、運算子、條件、迴圈、函式」等核心語法。</li>
<li>搭配 Reeborg 關卡，練習邏輯與解題。</li>
<li>寫程式要勇於嘗試與修正，錯誤是學習的起點！</li>
</ul>
</li>
<li><strong>主動多練習、多觀察、多思考</strong>
<ul>
<li>練習題目與挑戰，能讓你熟悉語法、訓練邏輯。</li>
<li>觀察程式執行過程與錯誤訊息，學會除錯（debug）。</li>
<li>遇到卡關時，試著將問題拆解成小步驟。</li>
</ul>
</li>
</ol>
<h4>二、Python 基本語法說明與範例</h4>
<table>
<tbody>
<tr>
<th>語法主題</th>
<th>說明</th>
<th>範例</th>
</tr>
<tr>
<td>變數</td>
<td>儲存資料（數字、文字、布林值等）</td>
<td><code>x = 5<br/>name = "Tom"<br/>is_ok = True</code></td>
</tr>
<tr>
<td>資料型態</td>
<td>整數 <code>int</code>、小數 <code>float</code>、字串 <code>str</code>、布林 <code>bool</code></td>
<td><code>a = 7<br/>b = 3.14<br/>c = "Hello"<br/>d = False</code></td>
</tr>
<tr>
<td>輸出</td>
<td>用 <code>print()</code> 顯示資訊</td>
<td><code>print("Hello world!")<br/>print(x + 2)</code></td>
</tr>
<tr>
<td>運算子</td>
<td>數學、比較、邏輯運算</td>
<td><code> # 數學<br/> y = x + 1<br/> # 比較<br/> x &gt; 3<br/> # 邏輯<br/> True and False </code></td>
</tr>
<tr>
<td>條件判斷</td>
<td>根據條件執行不同程式碼</td>
<td><code> if x &gt; 0:<br/>   print("正數")<br/> else:<br/>   print("負數或零") </code></td>
</tr>
<tr>
<td>迴圈 (while)</td>
<td>重複執行，直到條件不成立</td>
<td><code> count = 0<br/> while count &lt; 3:<br/>   print(count)<br/>   count += 1 </code></td>
</tr>
<tr>
<td>for 迴圈（了解即可）</td>
<td>依序處理序列資料</td>
<td><code> for i in range(5):<br/>   print(i) </code></td>
</tr>
<tr>
<td>函式</td>
<td>將重複動作打包，方便重用</td>
<td><code> def say_hello():<br/>   print("Hello!")<br/> say_hello() </code></td>
</tr>
<tr>
<td>縮排與註解</td>
<td>Python 用縮排分區塊，註解用 <code>#</code></td>
<td><code> # 這是註解<br/> if True:<br/>   print("有縮排") </code></td>
</tr>
</tbody>
</table>
<div class="tip"><strong>小提醒：</strong> Python 不用分號，且縮排必須統一（通常 4 個空格）。</div>
<h4>三、Reeborg's World 機器人操作重點</h4>
<ul>
<li><strong>基本指令</strong>
<ul>
<li><code>move()</code>：前進一格</li>
<li><code>turn_left()</code>：左轉 90 度</li>
<li><code>take()</code>：撿起物品</li>
<li><code>put()</code>：放下物品</li>
</ul>
</li>
<li><strong>判斷世界狀態的感測器</strong>
<ul>
<li><code>front_is_clear()</code>：前方有路</li>
<li><code>wall_in_front()</code>：前方有牆</li>
<li><code>right_is_clear()</code>：右方有路</li>
<li><code>wall_on_right()</code>：右方有牆</li>
<li><code>object_here()</code>：目前格子有物品</li>
<li><code>at_goal()</code>：到達終點</li>
</ul>
</li>
<li><strong>條件判斷/迴圈應用</strong>
<pre><code>
if front_is_clear():
    move()
else:
    turn_left()

while not at_goal():
    move()
                </code></pre>
</li>
<li><strong>自訂函式（提升可讀性與重用）</strong>
<pre><code>
def turn_right():
    for i in range(3):
        turn_left()

def pick_and_move():
    take()
    move()

# 呼叫自訂函式
turn_right()
                </code></pre>
</li>
<li><strong>解題流程建議</strong>
<ol>
<li>仔細閱讀題目與世界設定。</li>
<li>思考機器人要完成哪些步驟（可先畫流程圖）。</li>
<li>將步驟拆解成小動作，分別寫成程式。</li>
<li>適時用 <code>if</code> 或 <code>while</code> 控制流程。</li>
<li>多嘗試、多觀察，多用 print 或步步執行除錯。</li>
</ol>
</li>
</ul>
<div class="warning"><strong>常見錯誤：</strong>
<ul>
<li>少寫小括號（如 <code>move</code> 寫成 <code>move()</code>）。</li>
<li>縮排錯誤導致語法錯。</li>
<li>無窮迴圈（如 while 條件永遠為真）。</li>
</ul>
</div>
<h4>四、進階建議與常見問題</h4>
<ul>
<li><strong>多加練習</strong>
<ul>
<li>完成 Reeborg 的所有世界（關卡）。</li>
<li>嘗試設計自己的世界與題目。</li>
</ul>
</li>
<li><strong>閱讀程式碼，互相學習</strong>
<ul>
<li>觀摩別人解法，了解不同邏輯。</li>
<li>勇於提問與討論（如參加線上社群）。</li>
</ul>
</li>
<li><strong>養成良好習慣</strong>
<ul>
<li>適當註解，提高可讀性。</li>
<li>命名有意義的變數與函式。</li>
</ul>
</li>
</ul>
<h4>五、完整學習流程小結</h4>
<ol>
<li>學會 Python 基本文法、邏輯思考。</li>
<li>熟練 Reeborg 指令、感測器、流程控制。</li>
<li>多練習、多觀察、多修正。</li>
<li>培養拆解問題、設計函式的能力。</li>
<li>主動探索更多應用與進階技巧。</li>
</ol>
<h2>Javascript</h2>
<h4>JavaScript 初學者完整學習指引</h4>
<h4>一、為什麼學 JavaScript？</h4>
<ul>
<li>JavaScript 是網頁開發必學語言，執行於所有主流瀏覽器。</li>
<li>可用於前端（瀏覽器）、後端（Node.js）、行動應用、桌面應用等。</li>
<li>社群大、資源多，學會 JS 等於打開 Web 世界大門。</li>
</ul>
<h4>二、學習流程建議</h4>
<ol>
<li>認識 JavaScript 應用場景及基礎語法。</li>
<li>熟悉開發與測試環境：<br/>推薦直接在 Chrome、Edge、Firefox 等瀏覽器按 F12 開啟「開發人員工具」→「主控台(Console)」練習。</li>
<li>循序漸進學習語法與邏輯：從變數、流程控制、函式、物件等開始。</li>
<li>多做練習題與小專案。</li>
<li>了解 DOM 操作、事件處理與基礎網頁互動。</li>
<li>進階可學習 ES6+ 新語法與框架（如 React、Vue）。</li>
</ol>
<h4>三、JavaScript 必學基礎語法與範例</h4>
<table>
<tbody>
<tr>
<th>語法主題</th>
<th>說明</th>
<th>範例</th>
</tr>
<tr>
<td>變數宣告</td>
<td>用 <code>let</code>、<code>const</code>（現代 JS），<br/>不要再用 <code>var</code>。</td>
<td><code>let x = 10;<br/>const pi = 3.14;</code></td>
</tr>
<tr>
<td>資料型態</td>
<td>數字（Number）、字串（String）、布林（Boolean）、陣列（Array）、物件（Object）、null、undefined</td>
<td><code> let s = "hi";<br/> let arr = [1,2,3];<br/> let person = { name: "Tom", age: 20 }; </code></td>
</tr>
<tr>
<td>輸出</td>
<td>用 <code>console.log()</code> 輸出到主控台</td>
<td><code>console.log("Hello!");<br/>console.log(x + 2);</code></td>
</tr>
<tr>
<td>運算子</td>
<td>數學（+、-、*、/、%）、比較（==、===、!=、!==、&gt;、&lt;）、邏輯（&amp;&amp;、||、!）</td>
<td><code> let z = x + 5;<br/> x === 10<br/> (a &gt; 0) &amp;&amp; (b &lt; 5) </code></td>
</tr>
<tr>
<td>條件判斷</td>
<td>if、else if、else</td>
<td><code> if (x &gt; 0) {<br/>   console.log("正數");<br/> } else {<br/>   console.log("非正數");<br/> } </code></td>
</tr>
<tr>
<td>迴圈</td>
<td>for、while、do...while</td>
<td><code> for (let i = 0; i &lt; 3; i++) {<br/>   console.log(i);<br/> }<br/> <br/> let count = 0;<br/> while (count &lt; 3) {<br/>   console.log(count);<br/>   count++;<br/> } </code></td>
</tr>
<tr>
<td>函式</td>
<td>定義與呼叫，<br/> ES6 支援箭頭函式</td>
<td><code> function greet(name) {<br/>   console.log("Hi, " + name);<br/> }<br/> greet("Amy");<br/> <br/> // 箭頭函式<br/> const add = (a, b) =&gt; a + b;<br/> console.log(add(2,3)); </code></td>
</tr>
<tr>
<td>陣列與物件</td>
<td>基本操作：存取元素、方法如 <code>push</code>、<code>forEach</code> 等</td>
<td><code> let nums = [1,2,3];<br/> nums.push(4);<br/> nums.forEach(item =&gt; console.log(item));<br/> <br/> let person = { name: "Tom", age: 20 };<br/> console.log(person.name); </code></td>
</tr>
<tr>
<td>註解</td>
<td>單行 <code>//</code>，多行 <code>/* */</code></td>
<td><code> // 這是單行註解<br/> /*<br/> 這是多行註解<br/> */ </code></td>
</tr>
</tbody>
</table>
<div class="tip"><strong>小提醒：</strong> JavaScript 語法彈性大，但容易出現隱含錯誤，建議使用嚴格模式 <code>'use strict';</code>，養成良好命名與註解習慣。</div>
<h4>四、在網頁上的應用簡介</h4>
<ul>
<li>JavaScript 主要用於網頁互動、動態內容與事件處理。</li>
<li>可透過 <code>&lt;script&gt;</code> 標籤直接在 HTML 內嵌或引用外部 JS 檔案：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;JS 範例&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;button onclick="sayHello()"&gt;點我&lt;/button&gt;
  &lt;script&gt;
    function sayHello() {
      alert("你好！");
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<h4>五、常見錯誤與學習建議</h4>
<ul>
<li><strong>常見錯誤：</strong>
<ul>
<li>少分號或括號（雖然 JS 支援自動補全，但還是建議加上）。</li>
<li>變數未宣告直接使用。</li>
<li>區分 <code>==</code>（寬鬆相等）與 <code>===</code>（嚴格相等）。</li>
<li>陣列與物件存取語法錯誤。</li>
</ul>
</li>
<li><strong>學習建議：</strong>
<ul>
<li>多練習：在主控台嘗試各種語法。</li>
<li>閱讀 MDN（Mozilla Developer Network）文件，查詢 JS 語法與用法。</li>
<li>完成小專案，如計算機、Todo List、網頁互動等。</li>
<li>多與他人討論，參加線上社群。</li>
</ul>
</li>
</ul>
<h4>六、進階主題（可視情況逐步學習）</h4>
<ul>
<li>ES6+ 新語法（let、const、箭頭函式、解構賦值、展開運算子、模組化等）</li>
<li>事件處理、DOM 操作與網頁互動</li>
<li>非同步程式（callback、Promise、async/await）</li>
<li>物件導向程式設計、類別（class）</li>
<li>前端框架（如 React、Vue、Angular）</li>
<li>Node.js 伺服器端開發</li>
</ul>
<h3>HTML and CSS</h3>
<h4>HTML &amp; CSS 初學者學習指南</h4>
<h4>一、HTML 與 CSS 是什麼？</h4>
<ul>
<li><strong>HTML（超文件標記語言）</strong>：負責「網頁內容」與「結構」的描述，是網頁的骨架。</li>
<li><strong>CSS（層疊樣式表）</strong>：負責「網頁外觀、樣式、版面」的設計，是網頁的皮膚與裝飾。</li>
<li>兩者配合，讓你能打造美觀、結構良好的網站。</li>
</ul>
<h4>二、學習步驟建議</h4>
<ol>
<li>了解 HTML 與 CSS 各自用途與基本概念。</li>
<li>從基礎標籤（如 <code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;img&gt;</code>）與基本樣式（如顏色、字體、邊距）學起。</li>
<li>邊學邊練習：可用 <a href="https://codepen.io/" target="_blank">CodePen</a>、<a href="https://jsfiddle.net/" target="_blank">JSFiddle</a>、本地文字編輯器練習。</li>
<li>模仿簡單網頁，了解版型與排版原理。</li>
<li>逐步學習表格、表單、版面配置（如 Flexbox、Grid）。</li>
<li>挑戰自製個人履歷網頁、作品集、Landing Page 等小專案。</li>
</ol>
<h4>三、HTML 必學標籤與語法</h4>
<table>
<tbody>
<tr>
<th>標籤</th>
<th>用途</th>
<th>範例</th>
</tr>
<tr>
<td><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></td>
<td>標題（h1 最大）</td>
<td><code>&lt;h1&gt;主標題&lt;/h1&gt;</code></td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td>段落文字</td>
<td><code>&lt;p&gt;這是一段文字。&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td>超連結</td>
<td><code>&lt;a href="https://google.com"&gt;Google&lt;/a&gt;</code></td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td>插入圖片</td>
<td><code>&lt;img src="cat.jpg" alt="貓咪"&gt;</code></td>
</tr>
<tr>
<td><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code></td>
<td>無序/有序清單</td>
<td><code> &lt;ul&gt;<br/>   &lt;li&gt;項目1&lt;/li&gt;<br/>   &lt;li&gt;項目2&lt;/li&gt;<br/> &lt;/ul&gt; </code></td>
</tr>
<tr>
<td><code>&lt;div&gt;</code> / <code>&lt;span&gt;</code></td>
<td>區塊/行內分組、CSS 樣式輔助</td>
<td><code>&lt;div class="box"&gt;內容&lt;/div&gt;</code></td>
</tr>
<tr>
<td><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code></td>
<td>表格</td>
<td><code> &lt;table&gt;<br/>   &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;<br/> &lt;/table&gt; </code></td>
</tr>
<tr>
<td><code>&lt;form&gt;</code>、<code>&lt;input&gt;</code></td>
<td>表單與輸入欄位</td>
<td><code> &lt;form&gt;<br/>   &lt;input type="text" placeholder="姓名"&gt;<br/> &lt;/form&gt; </code></td>
</tr>
</tbody>
</table>
<h4>四、CSS 必學語法與範例</h4>
<ul>
<li>基本選擇器：<code>元素</code>、<code>.類別</code>、<code>#ID</code></li>
<li>常用屬性：<code>color</code>（文字顏色）、<code>background</code>（背景）、<code>font-size</code>、<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>、<code>border</code></li>
<li>文字對齊（<code>text-align</code>）、區塊對齊（<code>display</code>、<code>flex</code>、<code>grid</code>）</li>
<li>CSS 寫法可在 <code>&lt;style&gt;</code> 標籤、<code>style</code> 屬性或獨立 .css 檔案</li>
</ul>
<pre><code>
/* 樣式檔範例 */
h1 {
    color: #2d7f5e;
    font-size: 2em;
    text-align: center;
}
.box {
    background: #eaffea;
    padding: 1em;
    border-radius: 8px;
    margin-bottom: 1em;
}
#main {
    width: 80%;
    margin: auto;
}
        </code></pre>
<div class="tip"><strong>小技巧：</strong>
<ul>
<li>多善用瀏覽器「檢查元素」功能，調整 CSS 效果。</li>
<li>CSS 有「繼承」與「選擇器優先權」概念，遇到樣式衝突時要注意。</li>
</ul>
</div>
<h4>五、常見練習與專案</h4>
<ul>
<li>練習製作個人履歷網頁、名片網站、簡單 Landing Page。</li>
<li>模仿喜歡的網站版型，重新切版練習。</li>
<li>挑戰 CSS Flexbox、Grid 排版。</li>
<li>試著設計表單、導航列、圖文混排區塊。</li>
</ul>
<h4>六、常見錯誤與學習建議</h4>
<div class="warning"><strong>常見錯誤：</strong>
<ul>
<li>HTML 標籤忘記閉合、層級錯誤。</li>
<li>CSS 拼字錯誤、屬性寫錯或分號遺漏。</li>
<li>選擇器優先權搞混，導致樣式沒套用。</li>
<li>class 與 id 用法混淆。</li>
</ul>
</div>
<ul>
<li>多手寫、多練習，熟悉標籤與屬性。</li>
<li>常用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML" target="_blank">MDN Web Docs</a> 查詢 HTML/CSS 語法。</li>
<li>參加線上挑戰如 <a href="https://www.frontendmentor.io/" target="_blank">Frontend Mentor</a>、<a href="https://cssbattle.dev/" target="_blank">CSS Battle</a>。</li>
</ul>
<h4>七、進階主題推薦</h4>
<ul>
<li>RWD 響應式網頁設計（media query）</li>
<li>CSS 動畫與過渡（animation, transition）</li>
<li>SCSS/SASS 等 CSS 預處理器</li>
<li>Bootstrap、Tailwind CSS 等框架</li>
<li>網頁無障礙（a11y）設計</li>
</ul>
<h2>Project</h2>
<p>請協助撰寫一個 Python Flask 網頁應用程式，前端表單需包含：<br/><br/>1. 一個「通關密碼」輸入欄位（用於驗證操作權限）<br/>2. 一個可填入使用者學號的欄位<br/>3. 一個用於設定新電子郵箱密碼的欄位<br/>4. 一個用於確認新電子郵箱密碼的欄位<br/><br/>使用者填寫上述欄位並提交表單後，系統應自動於 Google Workspace 平台建立對應的 email 帳號。</p>
<p><img caption="false" height="194" src="/images/create_g_workspace_email_account.png" width="200"/></p>
<hr/>
<p>專案提案書：自動化 Google Workspace 帳號建立 Flask 應用程式<br/><br/>一、專案背景與目標<br/><br/>隨著組織規模成長，IT 部門需經常協助新員工建立 Google Workspace（G Suite）電子郵箱帳號。為提升效率、降低人為疏失及強化資安控管，本專案擬開發一個簡易 Web 應用程式，允許經授權者透過表單操作，自動於 Google Workspace 建立新 email 帳號。<br/><br/>二、需求說明</p>
<p>1. 前端表單功能：<br/>   - 通關密碼欄位（授權驗證）<br/>   - 可填入學號數字的欄位<br/>   - 電子郵箱密碼欄位<br/>   - 確認電子郵箱密碼欄位<br/>   - 按下送出後，系統自動於 Google Workspace 建立對應帳號<br/><br/>2. 安全性設計： <br/>   - 必須驗證通關密碼<br/>   - 僅允許授權人員操作 (例如: 只允許在特定網段進行操作)<br/>   - 檢查 email 格式與密碼強度<br/>   - 禁止重複帳號建立<br/>   - 僅允許數字做為帳號前綴<br/><br/>三、技術規劃<br/><br/>1. 技術需求<br/><br/>- Python 3.x<br/>- Flask — 前後端 Web 框架<br/>- google-api-python-client — Google Workspace API 操作<br/>- google-auth — 驗證與授權<br/>- Jinja2 — 表單模板（隨 Flask 內建）<br/>- pip — Python 套件管理<br/><br/>2. 開發與部署環境<br/><br/>- 建議部署於安全的內部伺服器或 Docker 容器<br/>- 僅開放組織內部網路存取<br/><br/>四、安裝說明<br/><br/>1. Python 套件安裝<br/><br/>請於專案目錄下執行：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install Flask google-api-python-client google-auth</pre>
<p>如需管理虛擬環境，建議搭配 venv 或 conda 使用。<br/><br/>2. Google Workspace API 準備<br/><br/>1. 建立 Google Cloud Platform 專案並啟用 Admin SDK API<br/>2. 建立 Service Account，下載憑證檔（JSON）<br/>3. 設定 Domain-wide Delegation（網域代理授權）<br/>4. 於 Google Workspace 管理控制台授權 API 的 OAuth2 Scope：<br/>   - https://www.googleapis.com/auth/admin.directory.user<br/><br/>五、各階段程式碼設計<br/><br/>1. 表單頁面（Flask/Jinja2）<br/><br/>python name=templates/form.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!doctype html&gt;
&lt;title&gt;建立 Google Workspace 帳號&lt;/title&gt;
&lt;h2&gt;建立 Google Workspace 帳號&lt;/h2&gt;
&lt;form method="POST"&gt;
  &lt;label&gt;通關密碼：&lt;input type="password" name="secret" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;學號：&lt;input type="text" name="prefix" required&gt;&lt;/label&gt;&lt;br&gt;
&lt;hr&gt;
以下密碼必須符合：&lt;br&gt;
至少 8 個字元&lt;br&gt;
建議包含：&lt;br&gt;
大寫 + 小寫字母&lt;br&gt;
數字&lt;br&gt;
特殊字元（如 !@#$)&lt;br&gt;
&lt;hr&gt;
  &lt;label&gt;新帳號密碼：&lt;input type="password" name="account_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;確認密碼：&lt;input type="password" name="confirm_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;input type="submit" value="送出"&gt;
&lt;/form&gt;
{% with messages = get_flashed_messages() %}
  {% if messages %}
    &lt;ul&gt;
    {% for message in messages %}
      &lt;li&gt;{{ message }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
  {% endif %}
{% endwith %}
</pre>
<p><br/>2. Flask 應用程式主體<br/><br/>python name=app.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template, request, redirect, url_for, flash
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os
 
app = Flask(__name__)
app.secret_key = os.urandom(24)
 
# 組態設定
DOMAIN = "your_domain_name"
ADMIN_EMAIL = "your_admin_email"
SERVICE_ACCOUNT_FILE = "C:/your_account_file_directory/service.json"
PASSWORD_SECRET = "your_password_secret"
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user']
 
def create_user(email_prefix, password):
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    delegated_credentials = credentials.with_subject(ADMIN_EMAIL)
    service = build('admin', 'directory_v1', credentials=delegated_credentials)
    user_body = {
        "primaryEmail": f"{email_prefix}@{DOMAIN}",
        "name": {
            "givenName": email_prefix,
            "familyName": "User"
        },
        "password": password
    }
    user = service.users().insert(body=user_body).execute()
    return user
 
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        secret = request.form['secret']
        prefix = request.form['prefix']
        account_password = request.form['account_password']
        confirm_password = request.form['confirm_password']

        # 權限驗證
        if secret != PASSWORD_SECRET:
            flash("通關密碼錯誤！")
            return redirect(url_for('index'))
        
        if not prefix.isdigit():
            flash("請輸入您的學號")
            return redirect(url_for('index'))
        
        # 密碼確認
        if account_password != confirm_password:
            flash("兩次密碼不一致，請重新確認！")
            return redirect(url_for('index'))
        
        # 密碼驗證（可加入更多規則）
        if len(account_password) &lt; 8:
            flash("密碼長度必須至少 8 個字元！")
            return redirect(url_for('index'))
        
        try:
            result = create_user(prefix, account_password)
            flash(f"帳號建立成功: {result['primaryEmail']}")
        except Exception as e:
            flash(f"建立帳號失敗: {str(e)}")
        return redirect(url_for('index'))
    return render_template('form.html')
 
if __name__ == '__main__':
    app.run(debug=True)
</pre>
<p><br/>3. 進階安全考量建議<br/><br/>- 密碼建議採用強度檢查（可用 Python 密碼強度套件輔助）<br/>- 增加帳號是否已存在的查核（可用 Google Workspace API 查詢帳號）<br/>- 日誌記錄所有操作，便於稽核<br/>- 部署於 HTTPS 環境<br/>- 建議將通關密碼與 API 金鑰資訊寫於環境變數或安全檔案，避免硬編碼<br/><br/>六、操作說明<br/><br/>1. 啟動服務<br/><br/>python app.py<br/><br/>預設於 http://localhost:5000 提供服務。<br/><br/>2. 使用流程<br/><br/>1. 開啟瀏覽器進入應用頁面<br/>2. 輸入通關密碼<br/>3. 輸入欲建立 email 的數字帳號前綴（如 123）<br/>4. 設定對應帳號密碼<br/>5. 按下送出，成功後將顯示建立結果<br/><br/>七、時程規劃（建議）<br/><br/></p>
<table border="1" cellpadding="6" cellspacing="0">
<thead>
<tr>
<th>階段</th>
<th>工作項目</th>
<th>預計工期</th>
</tr>
</thead>
<tbody>
<tr>
<td>需求確認</td>
<td>討論細節與權限</td>
<td>1 天</td>
</tr>
<tr>
<td>環境建置</td>
<td>API/Flask/金鑰設定</td>
<td>1 天</td>
</tr>
<tr>
<td>程式開發</td>
<td>表單與自動化功能撰寫</td>
<td>2 天</td>
</tr>
<tr>
<td>測試驗證</td>
<td>各種狀況測試與修正</td>
<td>1 天</td>
</tr>
<tr>
<td>上線部署</td>
<td>內部伺服器或容器部署</td>
<td>1 天</td>
</tr>
<tr>
<td>文件彙整</td>
<td>操作手冊與維運說明</td>
<td>1 天</td>
</tr>
</tbody>
</table>
<p><br/>八、結論<br/><br/>本專案將顯著提升 IT 人員建立 Google Workspace 帳號的效率與一致性，同時兼顧資訊安全。未來可依需求擴充驗證機制或加入更多自動化管理功能，如帳號停用、密碼重設等。<br/><br/></p>
<h3>Waitress</h3>
<p>採 <a href="https://pypi.org/project/waitress/">waitress</a> 執行 app.py</p>
<p>start_app.py 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from waitress import serve
from app import app  # 這裡導入 app.py 中的 Flask 應用

# 這裡的 127.0.0.1:5000 是服務監聽的地址與端口
serve(app, listen='127.0.0.1:5000', threads=8)
</pre>
<p>利用 <a href="https://pypi.org/project/waitress/">waitress</a> 執行的 app.py 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install Flask google-api-python-client google-auth
from flask import Flask, render_template, request, redirect, url_for, flash
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)

# 組態設定
DOMAIN = "your_google_workspace_domain"
ADMIN_EMAIL = "yout_admin_email"
SERVICE_ACCOUNT_FILE = "C:/your_service_account_file_directory/service.json"
PASSWORD_SECRET = "your_passwod_secret"
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user']

def create_user(email_prefix, password):
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    delegated_credentials = credentials.with_subject(ADMIN_EMAIL)
    service = build('admin', 'directory_v1', credentials=delegated_credentials)
    user_body = {
        "primaryEmail": f"{email_prefix}@{DOMAIN}",
        "name": {
            "givenName": email_prefix,
            "familyName": "User"
        },
        "password": password
    }
    user = service.users().insert(body=user_body).execute()
    return user

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        secret = request.form['secret']
        prefix = request.form['prefix']
        account_password = request.form['account_password']
        confirm_password = request.form['confirm_password']

        # 權限驗證
        if secret != PASSWORD_SECRET:
            flash("通關密碼錯誤！")
            return redirect(url_for('index'))
        
        if not prefix.isdigit():
            flash("請輸入您的學號")
            return redirect(url_for('index'))
        
        # 密碼確認
        if account_password != confirm_password:
            flash("兩次密碼不一致，請重新確認！")
            return redirect(url_for('index'))
        
        # 密碼驗證（可加入更多規則）
        if len(account_password) &lt; 8:
            flash("密碼長度必須至少 8 個字元！")
            return redirect(url_for('index'))
        
        try:
            result = create_user(prefix, account_password)
            flash(f"帳號建立成功: {result['primaryEmail']}")
        except Exception as e:
            flash(f"建立帳號失敗: {str(e)}")
        return redirect(url_for('index'))
    return render_template('form.html')

# 不使用 app.run()，讓 waitress 來處理
</pre>
<p>配合使用的 nginx.conf</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       [::]:80 ipv6only=on;
        server_name  your_first_server_domain your_server_cname_domain;

        #root   html;
        # 將 port 80 http 連結到倉儲的靜態網站
        root C:/your_static_site_directory/wcm2025_hw;
        index  index.html;

        location / {
            try_files $uri $uri/ =404;
        }
    }

    server {
        listen       [::]:443 ssl ipv6only=on;
        http2        on;
        server_name  your_first_server_domain your_server_cname_domain;

        ssl_certificate      fullchain.pem;
        ssl_certificate_key  privkey.pem;
        ssl_protocols        TLSv1.2 TLSv1.3;
        ssl_ciphers          HIGH:!aNULL:!MD5;

        location / {
            # https port 443 的連結資料是由近端 IPv6 or IPv4 port 8080 所提供
            #proxy_pass         http://[::1]:5000;
            proxy_pass         http://127.0.0.1:5000;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }
}</pre>
<p>初步測試所使用的單一通關密碼進行驗證，可以再透過 flask-pyoidc 改為 <a href="https://learn.microsoft.com/zh-tw/entra/identity-platform/v2-protocols-oidc">OIDC</a> 認證通關:</p>
<p>先安裝必要模組:</p>
<p style="padding-left: 30px;">pip install Flask flask-pyoidc google-api-python-client google-auth</p>
<p>接著登入 Google Cloud Console 建立 OAuth 2.0 憑證:</p>
<ol>
<li>登入 Google Cloud Console</li>
<li>選擇你的專案，點選「建立憑證」&gt;「OAuth 用戶端 ID」</li>
<li>選擇「Web 應用程式」</li>
<li>設定授權的重新導向 URI（Redirect URI）</li>
<li>例如：http://localhost:5000/oidc/callback</li>
<li>取得「用戶端 ID」與「用戶端密鑰」</li>
</ol>
<p>接著建立 OIDC 設定檔:<br/><br/>將下列內容儲存為 oidc_secrets.json（請填入你自己的 client_id/client_secret）：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{
  "web": {
    "client_id": "YOUR_CLIENT_ID",
    "client_secret": "YOUR_CLIENT_SECRET",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "issuer": "https://accounts.google.com",
    "redirect_uris": ["http://localhost:5000/oidc/callback"]
  }
}</pre>
<p>利用 OIDC 認證通關的 app.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install Flask flask-pyoidc google-api-python-client google-auth
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_pyoidc import OIDCAuthentication
from flask_pyoidc.provider_configuration import ProviderConfiguration, ClientMetadata
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os
import json

app = Flask(__name__)
app.secret_key = os.urandom(24)

# === OIDC 設定 ===
with open('oidc_secrets.json') as f:
    oidc_conf = json.load(f)['web']

issuer = oidc_conf['issuer']
client_metadata = ClientMetadata(
    client_id=oidc_conf['client_id'],
    client_secret=oidc_conf['client_secret'],
    post_logout_redirect_uris=[oidc_conf['redirect_uris'][0]]
)
provider_config = ProviderConfiguration(
    issuer=issuer,
    client_metadata=client_metadata
)
auth = OIDCAuthentication({'default': provider_config}, app)

# === Google Workspace 設定 ===
DOMAIN = "your_google_workspace_domain"
ADMIN_EMAIL = "your_admin_email"
SERVICE_ACCOUNT_FILE = "C:/your_service_account_file_directory/service.json"
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user']

def create_user(email_prefix, password):
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    delegated_credentials = credentials.with_subject(ADMIN_EMAIL)
    service = build('admin', 'directory_v1', credentials=delegated_credentials)
    user_body = {
        "primaryEmail": f"{email_prefix}@{DOMAIN}",
        "name": {
            "givenName": email_prefix,
            "familyName": "User"
        },
        "password": password
    }
    user = service.users().insert(body=user_body).execute()
    return user

@app.route('/logout')
def logout():
    # 清除 session 並 redirect 回首頁
    session.clear()
    return redirect(auth.client_end_session_uri('default', url_for('index', _external=True)))

@app.route('/', methods=['GET', 'POST'])
@auth.oidc_auth('default')
def index():
    # 取得登入者資訊
    user_session = auth.user_session
    user_email = user_session.userinfo['email']

    # 只允許特定網域
    if not user_email.endswith('@your_google_workspace_domain'):
        return "無權限，請使用組織帳號登入", 403

    if request.method == 'POST':
        prefix = request.form['prefix']
        account_password = request.form['account_password']
        confirm_password = request.form['confirm_password']

        if not prefix.isdigit():
            flash("請輸入您的學號")
            return redirect(url_for('index'))

        if account_password != confirm_password:
            flash("兩次密碼不一致，請重新確認！")
            return redirect(url_for('index'))

        if len(account_password) &lt; 8:
            flash("密碼長度必須至少 8 個字元！")
            return redirect(url_for('index'))

        try:
            result = create_user(prefix, account_password)
            flash(f"帳號建立成功: {result['primaryEmail']}")
        except Exception as e:
            flash(f"建立帳號失敗: {str(e)}")
        return redirect(url_for('index'))
    return render_template('form.html', user_email=user_email)</pre>
<p>配合 OIDC 認證的 form.html:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!doctype html&gt;
&lt;title&gt;建立 Google Workspace 帳號&lt;/title&gt;
&lt;h2&gt;建立 Google Workspace 帳號&lt;/h2&gt;
&lt;p&gt;目前登入：{{ user_email }}&lt;/p&gt;
&lt;form method="POST"&gt;
  &lt;label&gt;學號（Email @ 前）：&lt;input type="text" name="prefix" required pattern="\d+"&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;新帳號密碼：&lt;input type="password" name="account_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;再次輸入密碼：&lt;input type="password" name="confirm_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;input type="submit" value="送出"&gt;
&lt;/form&gt;
{% with messages = get_flashed_messages() %}
  {% if messages %}
    &lt;ul&gt;
    {% for message in messages %}
      &lt;li&gt;{{ message }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
  {% endif %}
{% endwith %}
&lt;a href="{{ url_for('logout') }}"&gt;登出&lt;/a&gt;</pre>
<p>之後假設透過收集用戶的 email address 存為 allowed_email.txt， 採 OIDC 認證流程時，只允許電子郵箱在此檔案中的用戶有權限利用 app.py 建立 Google Workspace 帳號, 則 app.py 配合修改如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_pyoidc import OIDCAuthentication
from flask_pyoidc.provider_configuration import ProviderConfiguration, ClientMetadata
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os
import json

app = Flask(__name__)
app.secret_key = os.urandom(24)

# 讀取 allowed_email.txt，存成 set
def load_allowed_emails(filepath="allowed_email.txt"):
    with open(filepath, encoding="utf-8") as f:
        return set(line.strip().lower() for line in f if line.strip())

ALLOWED_EMAILS = load_allowed_emails()

# === OIDC 設定 ===
with open('oidc_secrets.json') as f:
    oidc_conf = json.load(f)['web']

issuer = oidc_conf['issuer']
client_metadata = ClientMetadata(
    client_id=oidc_conf['client_id'],
    client_secret=oidc_conf['client_secret'],
    post_logout_redirect_uris=[oidc_conf['redirect_uris'][0]]
)
provider_config = ProviderConfiguration(
    issuer=issuer,
    client_metadata=client_metadata
)
auth = OIDCAuthentication({'default': provider_config}, app)

# === Google Workspace 設定 ===
DOMAIN = "your_google_workspace_domain"
ADMIN_EMAIL = "your_admin_email"
SERVICE_ACCOUNT_FILE = "C:/your_service_account_file_directory/service.json"
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user']

def create_user(email_prefix, password):
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    delegated_credentials = credentials.with_subject(ADMIN_EMAIL)
    service = build('admin', 'directory_v1', credentials=delegated_credentials)
    user_body = {
        "primaryEmail": f"{email_prefix}@{DOMAIN}",
        "name": {
            "givenName": email_prefix,
            "familyName": "User"
        },
        "password": password
    }
    user = service.users().insert(body=user_body).execute()
    return user

@app.route('/logout')
def logout():
    session.clear()
    return redirect(auth.client_end_session_uri('default', url_for('index', _external=True)))

@app.route('/', methods=['GET', 'POST'])
@auth.oidc_auth('default')
def index():
    user_session = auth.user_session
    user_email = user_session.userinfo['email'].lower()

    # 只允許在 allowed_email.txt 的 email
    if user_email not in ALLOWED_EMAILS:
        return render_template('not_allowed.html', user_email=user_email), 403

    if request.method == 'POST':
        prefix = request.form['prefix']
        account_password = request.form['account_password']
        confirm_password = request.form['confirm_password']

        if not prefix.isdigit():
            flash("請輸入您的學號")
            return redirect(url_for('index'))

        if account_password != confirm_password:
            flash("兩次密碼不一致，請重新確認！")
            return redirect(url_for('index'))

        if len(account_password) &lt; 8:
            flash("密碼長度必須至少 8 個字元！")
            return redirect(url_for('index'))

        try:
            result = create_user(prefix, account_password)
            flash(f"帳號建立成功: {result['primaryEmail']}")
        except Exception as e:
            flash(f"建立帳號失敗: {str(e)}")
        return redirect(url_for('index'))
    return render_template('form.html', user_email=user_email)</pre>
<p>templates/form.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!doctype html&gt;
&lt;title&gt;建立 Google Workspace 帳號&lt;/title&gt;
&lt;h2&gt;建立 Google Workspace 帳號&lt;/h2&gt;
&lt;p&gt;目前登入：{{ user_email }}&lt;/p&gt;
&lt;form method="POST"&gt;
  &lt;label&gt;學號（Email @ 前）：&lt;input type="text" name="prefix" required pattern="\d+"&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;新帳號密碼：&lt;input type="password" name="account_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;label&gt;再次輸入密碼：&lt;input type="password" name="confirm_password" required&gt;&lt;/label&gt;&lt;br&gt;
  &lt;input type="submit" value="送出"&gt;
&lt;/form&gt;
{% with messages = get_flashed_messages() %}
  {% if messages %}
    &lt;ul&gt;
    {% for message in messages %}
      &lt;li&gt;{{ message }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
  {% endif %}
{% endwith %}
&lt;a href="{{ url_for('logout') }}"&gt;登出&lt;/a&gt;</pre>
<p>另外新增一個 templates/not_allowed.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!doctype html&gt;
&lt;title&gt;未授權訪問&lt;/title&gt;
&lt;h2&gt;未授權訪問&lt;/h2&gt;
&lt;p&gt;您的 email（{{ user_email }}）不在允許名單中，無法建立帳號。&lt;/p&gt;
&lt;a href="{{ url_for('logout') }}"&gt;登出&lt;/a&gt;</pre>
<p></p>
<h3>API</h3>
<p>以下是「建立 Google Cloud Platform 專案並啟用 Admin SDK API」的詳細操作步驟，適用於管理 Google Workspace 的自動化應用：<br/><br/>一、建立 Google Cloud Platform (GCP) 專案<br/><br/>1. 登入 Google Cloud Console<br/>   前往 [Google Cloud Console](<a href="https://console.cloud.google.com">https://console.cloud.google.com</a>)。<br/><br/>2. 建立新專案<br/>   - 點選左上角的「專案選單」下拉按鈕（通常會顯示你目前的專案名稱）。<br/>   - 在彈出的專案視窗中，點選「新建專案」。<br/>   - 輸入專案名稱（如：workspace-account-automation）。<br/>   - 選擇對應的組織與資料夾（如有需要）。<br/>   - 點選「建立」。<br/><br/>3. 切換到新專案<br/>   - 專案建立完成後，點選右上角的「通知」可快速切換到新專案，或再次於專案選單中切換至新專案。<br/><br/>二、啟用 Admin SDK API and Gmail API<br/><br/>1. 進入 API 管理頁面<br/>   - 確認你當前專案已切換至剛建立的專案。<br/>   - 在左側導覽列，選擇「API 與服務」→「程式庫」。<br/><br/>2. 搜尋並啟用 Admin SDK<br/>   - 在搜尋框輸入 `Admin SDK`。<br/>   - 點選搜尋結果中的「Admin SDK」。<br/>   - 點選「啟用」。</p>
<ul>
<li data-end="633" data-start="554">
<p data-end="633" data-start="556">前往 Google Cloud Console：<br data-end="583" data-start="580"/> 👉 <a class="cursor-pointer" data-end="633" data-start="588" rel="noopener" target="_new">https://console.cloud.google.com/apis/library</a></p>
</li>
<li data-end="710" data-start="634">
<p data-end="651" data-start="636">搜尋並啟用對應 API，例如：</p>
<ul data-end="710" data-start="654">
<li data-end="672" data-start="654">
<p data-end="672" data-start="656">Google Drive API</p>
</li>
<li data-end="686" data-start="675">
<p data-end="686" data-start="677">Gmail API</p>
</li>
<li data-end="710" data-start="689">
<p data-end="710" data-start="691">Google Sheets API 等</p>
</li>
</ul>
</li>
</ul>
<p>三、（進階）建立並下載 Service Account 金鑰</p>
<p><a href="https://console.cloud.google.com/iam-admin/serviceaccounts">https://console.cloud.google.com/iam-admin/serviceaccounts</a> </p>
<p>✅ 建立新的服務帳戶並啟用 Domain-wide Delegation</p>
<p>步驟：</p>
<p>🔁 建立一個新的 Service Account（在建立流程中會有「進階設定」）</p>
<p>🧭 詳細步驟如下：</p>
<p>1. 前往 [Google Cloud Console – Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts)<br/>2. 點選【建立服務帳戶】<br/>3. 輸入服務帳戶名稱、ID、描述，點【建立並繼續】<br/>4. 權限頁面可以直接點【繼續】<br/>5. 第三步是「授予使用者訪問權限」：忽略它 ➝ 點【完成】<br/>6. 建立完成後，回到該服務帳戶的詳細資料頁面</p>
<p>✅ 啟用 Domain-wide Delegation：</p>
<p>1. 點你剛建立的服務帳戶名稱<br/>2. 點選頁面上方的【Domain-wide Delegation】分頁<br/>3. 按下【啟用網域範圍代理】按鈕<br/>4. 填寫「產品名稱」（任意填即可，如：Workspace Bot）<br/>5. 點【儲存】</p>
<p>📌 完成後你會看到：</p>
<p>* 一個 Client ID`（要貼去 Workspace 管理控制台使用）<br/>* 「View Google Workspace Admin Console」按鈕</p>
<p>✅ 接著在 Workspace Admin Console 授權這個 Client ID</p>
<p>1. 登入 [admin.google.com](https://admin.google.com)（必須是超級管理員）<br/>2. 前往：安全性 (Security) &gt; Access and data control &gt; API 控制權限 (API controls)&gt; 網域範圍代理（Domain-wide delegation) &gt; MANAGE DOMAIN WIDE DELEGATION<br/>3. 點【新增】<br/>4. 輸入你剛剛的 Client ID<br/>5. 輸入你要授權的 OAuth scopes，例如：</p>
<p>https://www.googleapis.com/auth/admin.directory.user<br/>https://www.googleapis.com/auth/admin.directory.group</p>
<h2>V</h2>
<p><a href="https://mde.tw/v/">https://mde.tw/v/</a> </p>
<p><a href="/downloads/v.properties">v.properties</a> for SciTE (將 V 程式碼存為 .v 後，在 SciTE 中以 Tools - Go 執行 v run 檔名.v)</p>
<p><a href="https://docs.vlang.io/introduction.html">V Documentation</a></p>
<p>v install pdf 之後，<a href="https://github.com/vlang/pdf">pdf 模組</a>在可攜系統將會位於 Y:\home_ipv6\.vmodules</p>
<p><a href="https://github.com/vlang/vinix">https://github.com/vlang/vinix</a> </p>
<p><a href="https://github.com/vlang/ved">https://github.com/vlang/ved</a> </p>
<p><a href="https://github.com/livewire/volt">https://github.com/livewire/volt</a> </p>
<p><a href="https://github.com/elliotchance/vsql">https://github.com/elliotchance/vsql</a> </p>
<p><a href="https://github.com/vlang/gitly">https://github.com/vlang/gitly</a> </p>
<p><a href="https://github.com/vlang/vorum">https://github.com/vlang/vorum</a> </p>
<p data-end="242" data-start="143">V 語言的核心目標是「簡單、安全、高效」，並且特別適合用來開發高效的系統程式、嵌入式系統、CLI 工具等。它的設計理念是為了彌補 C 語言和 Rust 之間的差距，簡化開發過程，同時保持高效與安全。</p>
<ul data-end="548" data-start="244">
<li data-end="477" data-start="244">
<p data-end="253" data-start="246"><strong data-end="252" data-start="246">特點</strong>：</p>
<ul data-end="477" data-start="256">
<li data-end="293" data-start="256">
<p data-end="293" data-start="258"><strong data-end="275" data-start="258">語法簡單，無需大量樣板代碼</strong>，學習曲線較平緩，適合開發快速原型。</p>
</li>
<li data-end="330" data-start="296">
<p data-end="330" data-start="298"><strong data-end="311" data-start="298">無垃圾回收（GC）</strong>，記憶體管理方式可選擇手動或引用計數。</p>
</li>
<li data-end="377" data-start="333">
<p data-end="377" data-start="335">支援 <strong data-end="345" data-start="338">跨平台</strong> 編譯（Windows、Linux、macOS、WASM 等）。</p>
</li>
<li data-end="412" data-start="380">
<p data-end="412" data-start="382"><strong data-end="392" data-start="382">編譯速度極快</strong>，小型專案甚至可以在 1 秒內編譯完畢。</p>
</li>
<li data-end="449" data-start="415">
<p data-end="449" data-start="417">使用 <strong data-end="430" data-start="420">靜態類型系統</strong>，並強制編譯期檢查，避免空指標等錯誤。</p>
</li>
<li data-end="477" data-start="452">
<p data-end="477" data-start="454">僅生成一個可執行檔，避免複雜的依賴和部署問題。</p>
</li>
</ul>
</li>
<li data-end="548" data-start="479">
<p data-end="548" data-start="481"><strong data-end="489" data-start="481">設計理念</strong>：像 Go 語言一樣簡單，像 C 一樣高效，像 Rust 一樣安全，但更加簡化與直接，避免過多的樣板代碼和繁瑣的設置。</p>
</li>
</ul>
<h4 data-end="565" data-start="550"><strong data-end="565" data-start="555">未來發展性：</strong></h4>
<p data-end="615" data-start="566">V 語言的發展性仍在進行中，儘管它有一些非常有吸引力的特點，但由於它相對較新，目前仍面臨一些挑戰：</p>
<ul data-end="873" data-start="618">
<li data-end="696" data-start="618">
<p data-end="696" data-start="620"><strong data-end="628" data-start="620">生態系統</strong>：目前的開發生態系統較小，缺乏許多現成的庫和框架。這對於大規模商業應用開發來說是一個障礙，但 V 語言的發展者已經在努力完善其生態系統。</p>
</li>
<li data-end="760" data-start="699">
<p data-end="760" data-start="701"><strong data-end="712" data-start="701">生產力與穩定性</strong>：儘管 V 語言設計上非常簡單，但實際運行的穩定性和性能在長期大規模使用中如何表現仍然需要觀察。</p>
</li>
<li data-end="873" data-start="763">
<p data-end="873" data-start="765"><strong data-end="774" data-start="765">市場接受度</strong>：Go 和 Rust 已經在市場中占有一席之地，V 的接受度可能需要時間。如果能夠快速吸引開發者社群並積極進行優化，未來仍然有可能在某些領域獲得一席之地，特別是在需要快速原型開發和高效編譯的場景中。</p>
</li>
</ul>
<p><strong>V 語言</strong>是一個相對較新的程式語言，旨在彌補當前流行語言中的某些空白。與主流的編程語言（如 <strong>Go</strong>、<strong>Rust</strong>、<strong>C++</strong>、<strong>Python</strong> 等）相比，V 有一些明顯的優勢，特別是在 <strong>簡單性、安全性</strong> 和 <strong>編譯速度</strong> 方面。但它的未來性仍然受到多方面挑戰，包括生態系統、社群支持、以及功能的深度等。</p>
<h4><strong>V 語言與現有熱門語言比較</strong></h4>
<hr/>
<p><br/>1. <strong>V 語言 vs Go</strong></p>
<h4><strong>優勢</strong>：</h4>
<ul>
<li>
<p><strong>簡單性與語法</strong>：V 的語法非常簡單，沒有繁瑣的樣板代碼或其他語言常見的複雜結構（如 Go 的錯誤處理機制）。開發者可以像 Python 一樣輕鬆寫出簡潔的程式碼，而又能保有 C 語言般的性能。</p>
</li>
<li>
<p><strong>編譯速度</strong>：V 的編譯速度超快，通常小型專案在 1 秒內就能編譯完成。對比 Go，V 在這一點上有顯著的優勢，尤其是當開發者處於快速原型開發或需要迭代的情況下。</p>
</li>
<li>
<p><strong>無垃圾回收</strong>：V 沒有垃圾回收（GC），而 Go 使用垃圾回收機制。這使得 V 更適合一些對 <strong>記憶體控制</strong> 要求極高的應用，如嵌入式系統或高效能計算。</p>
</li>
<li>
<p><strong>安全性</strong>：V 強調<strong>編譯時錯誤檢查</strong>，這使得許多錯誤可以在編譯階段就被捕捉。Go 的錯誤處理機制雖然簡單，但<strong>缺乏像 V 一樣強制編譯期安全檢查</strong>。</p>
</li>
</ul>
<h4><strong>挑戰</strong>：</h4>
<ul>
<li>
<p><strong>生態系統與庫</strong>：Go 擁有龐大的生態系統和現成的庫，可以快速構建各類應用。相比之下，V 的生態系統仍在發展中，許多領域（如 Web 開發、機器學習等）仍然缺乏現成的庫和框架。</p>
</li>
<li>
<p><strong>並行性</strong>：Go 的 <strong>goroutines</strong> 是其最具代表性的特性，對於並行計算非常高效。V 雖然也支持併發，但其並行模型還不如 Go 成熟。</p>
</li>
</ul>
<hr/>
<p><br/>2. <strong>V 語言 vs Rust</strong></p>
<h4><strong>優勢</strong>：</h4>
<ul>
<li>
<p><strong>簡單性與學習曲線</strong>：Rust 的學習曲線比較陡峭，尤其是對記憶體管理的要求，V 語言則更加簡單。V 更容易上手，適合那些需要高效能但又不想為了記憶體安全而陷入過度複雜性的開發者。</p>
</li>
<li>
<p><strong>編譯速度</strong>：V 的編譯速度比 Rust 快得多。Rust 的編譯過程比較慢，特別是在大型專案中，這對開發者的效率是一個不小的挑戰。</p>
</li>
<li>
<p><strong>小型應用與原型開發</strong>：由於 V 的語法非常簡潔，編譯速度極快，因此它非常適合進行快速原型開發。Rust 雖然適合構建高性能系統，但對於快速原型和小型應用，V 可能會更高效。</p>
</li>
</ul>
<h4><strong>挑戰</strong>：</h4>
<ul>
<li>
<p><strong>記憶體管理</strong>：Rust 以其<strong>精確的記憶體管理</strong>著稱，並且有<strong>所有權模型</strong>來防止內存錯誤（例如空指標、內存洩漏）。V 雖然沒有垃圾回收，但它的記憶體管理仍不如 Rust 精細，並且沒有像 Rust 那樣強大的所有權檢查。</p>
</li>
<li>
<p><strong>性能</strong>：Rust 被設計為極致高效，能與 C++ 相媲美。V 雖然在性能上不差，但在極限性能需求下，Rust 仍然占據領先地位。</p>
</li>
</ul>
<hr/>
<p><br/>3. <strong>V 語言 vs C++</strong></p>
<h4><strong>優勢</strong>：</h4>
<ul>
<li>
<p><strong>簡單性</strong>：C++ 的語法比較冗長且容易出錯，需要大量樣板代碼，並且手動管理記憶體容易導致錯誤。V 則簡化了許多這些複雜的操作，像 Go 一樣注重簡潔的語法設計，能減少開發者的負擔。</p>
</li>
<li>
<p><strong>編譯速度</strong>：C++ 的編譯時間非常長，尤其在大型專案中，V 的快速編譯是一大優勢。</p>
</li>
<li>
<p><strong>安全性</strong>：C++ 允許使用指標運算，這使得它容易出現空指標和內存錯誤，而 V 語言則不允許這些操作，強制進行編譯時檢查以避免此類錯誤。</p>
</li>
</ul>
<h4><strong>挑戰</strong>：</h4>
<ul>
<li>
<p><strong>性能</strong>：C++ 是目前最強大的系統編程語言之一，無論在內存控制還是處理速度上，C++ 都有極高的優勢。V 可能無法與 C++ 在極限性能上競爭，尤其是在需要 <strong>低層次硬體控制</strong> 或 <strong>高效能計算</strong> 的應用中。</p>
</li>
<li>
<p><strong>生態系統</strong>：C++ 的生態系統非常龐大，擁有大量的庫和工具支援，這是 V 無法在短期內超越的。</p>
</li>
</ul>
<hr/>
<p><br/>4. <strong>V 語言 vs Python</strong></p>
<h4><strong>優勢</strong>：</h4>
<ul>
<li>
<p><strong>性能</strong>：Python 雖然在開發效率上非常高，但它的執行速度比 V 慢得多，尤其是處理大量數據時，Python 的性能瓶頸非常明顯。而 V 能提供接近 C 的性能，適合高效能需求的應用。</p>
</li>
<li>
<p><strong>編譯速度與部署</strong>：Python 需要安裝解釋器並處理外部依賴，而 V 可以直接編譯成單一的原生可執行檔，這使得 V 在部署和運行效率上優於 Python。</p>
</li>
<li>
<p><strong>靜態型別與安全性</strong>：V 是靜態類型的，這意味著許多錯誤可以在編譯階段就被檢查出來，這比 Python 的動態類型安全性更高。</p>
</li>
</ul>
<h4><strong>挑戰</strong>：</h4>
<ul>
<li>
<p><strong>生態系統與庫</strong>：Python 目前擁有非常龐大的生態系統，無論是 Web 開發、數據科學、機器學習還是自動化腳本，都有非常成熟的庫可供使用。V 的生態系統還處於起步階段，缺乏像 Python 一樣強大的第三方庫支持。</p>
</li>
<li>
<p><strong>開發效率</strong>：Python 是一個高度靈活的語言，開發速度非常快，對開發者非常友好。相比之下，V 雖然簡單，但還是比 Python 多了一些限制，並且其生態系統尚不完整。</p>
</li>
</ul>
<hr/>
<h4><strong>總結：V 語言的優勢與未來性</strong></h4>
<table>
<thead>
<tr>
<th>語言</th>
<th>優勢</th>
<th>未來發展性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Go</strong></td>
<td>簡單語法、高效編譯、無垃圾回收、快速原型開發</td>
<td>仍需擴展庫和工具，與 Go 競爭的空間在於更強的安全性和編譯速度</td>
</tr>
<tr>
<td><strong>Rust</strong></td>
<td>簡單易學、編譯速度極快、內存控制精細</td>
<td>開發速度快、跨平台部署、但功能不如 Rust 精細，未來可成為更輕量級的選擇</td>
</tr>
<tr>
<td><strong>C++</strong></td>
<td>性能極高、深層系統控制</td>
<td>V 更簡單安全，但無法與 C++ 在極限性能上競爭，適合快速開發</td>
</tr>
<tr>
<td><strong>Python</strong></td>
<td>開發效率高、庫支持多</td>
<td>V 的高效性能可替代 Python 在處理大量數據時的瓶頸，但生態不如 Python 成熟</td>
</tr>
</tbody>
</table>
<p><strong>V 的未來性</strong>取決於它是否能夠吸引到更多的開發者社群，並且發展出豐富的生態系統和第三方庫。隨著它在 <strong>系統開發</strong> 和 <strong>高效能應用</strong> 上的強大優勢，V 很有可能在這些領域獲得成功，但要成為類似 Python 或 Go 那樣的主流語言，還需要更長時間的發展。</p>
<h3>learn_V</h3>
<p><a href="/downloads/v_ex.7z">v_ex.7z</a></p>
<p><a href="http://229.cycu.org/gnuplot.7z">gnuplot.7z</a></p>
<p><a href="https://youtu.be/xMGNlUZQ-6w">Interview with the creator of V</a></p>
<p><a href="https://bitshifters.cc/2025/05/17/vlang.html">https://bitshifters.cc/2025/05/17/vlang.html</a> </p>
<p><a href="https://n-skvortsov-1997.github.io/reviews/">Review on V</a></p>
<p><a href="https://github.com/vlang/v/blob/master/doc/docs.md">V Documentation</a></p>
<p>Install from source code:</p>
<p style="padding-left: 30px;">git clone https://github.com/vlang/v<br/>cd v<br/>make # make.bat on Windows </p>
<p>或直接從 <a href="https://github.com/vlang/v/releases">github.com/vlang/v/release</a> 下載</p>
<p>V 更新:</p>
<p style="padding-left: 30px;">v up</p>
<p style="padding-left: 30px;">自行取下最新原始碼後，自行編譯</p>
<p><a href="https://blog.vlang.io/getting-started-with-v">https://blog.vlang.io/getting-started-with-v</a>/</p>
<p><a href="https://github.com/v-community/v_by_example/blob/master/cn/README.md">V by examples</a></p>
<p><a href="https://github.com/coderlyfe/vweb_tut">vweb tutorial</a> (<a href="https://www.youtube.com/watch?v=ga4B9pWXc2E">video</a>)</p>
<p><a href="https://github.com/malisipi/vwebui">https://github.com/malisipi/vwebui</a> (<a href="https://github.com/webui-dev/v-webui">https://github.com/webui-dev/v-webui</a>)</p>
<p style="padding-left: 30px;"><a href="https://webui.me/docs">https://webui.me/docs</a> </p>
<p><a href="https://labs.davlgd.fr/posts/2024-02-how-own-web-server-vlang/">https://labs.davlgd.fr/posts/2024-02-how-own-web-server-vlang/</a> </p>
<h1>Reeborg</h1>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py</a></p>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_east_west.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_east_west.py</a> </p>
<hr/>
<p><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a></p>
<p><a href="https://github.com/mdecycu/cs101">https://github.com/mdecycu/cs101</a></p>
<p><a href="https://reeborg.ca/docs/en/python/index.html">https://reeborg.ca/docs/en/python/index.html</a></p>
<p><a href="https://aroberge.github.io/reeborg-api/">https://aroberge.github.io/reeborg-api/</a></p>
<p>if using local static port 9442:</p>
<p style="padding-left: 30px;"><a href="https://127.0.0.1:8442/reeborg/?lang=en&amp;mode=python&amp;menu=%2Freeborg%2Fworlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=%2Freeborg%2Fworlds%2Ftutorial_en%2Fharvest1.json&amp;editor=%2Freeborg%2Fpython%2Fharvest1.py">Reeborg</a></p>
<p>For Github Pages:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=%2Freeborg%2Fworlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=%2Freeborg%2Fworlds%2Ftutorial_en%2Fharvest1.json&amp;editor=%2Freeborg%2Fpython%2Fharvest1.py">Reeborg</a></p>
<p></p>
<h2>ex1</h2>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py</a> 是已知的機器人採收紅蘿蔔的程式，經由以下與 Copilot 的對話，希望透過 Python Class 的編寫解決特定範圍農作物採收的程式。</p>
<p>問句:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">以下是 Reeborg 一個用來採收紅蘿蔔的程式, 目前位於 (3,3) 到 (8,8) 的區域中各座標點, 各有一個紅羅蔔等待採收, 現在想要建立一個 harvest() class, 可以利用 (3,3), (8,8)作為標定有農作物必須採收的兩個區域對角點座標, 而程式可以利用此一 harvest 類別生成案例完成採收的任務: def turn(int):
    for i in range(int):
        turn_left()
        
def new_move(int):
    for i in range(int):
        move()
        
def harvest_one_row():
    while object_here():
        take()
    else:
        move()
# move to the field
new_move(2)
turn_left()
new_move(2)

for i in range(3):
    while is_facing_north():
        for i in range(6):
            harvest_one_row()
        for i in range(2):
            turn(3)
            move() 
    else:
        for i in range(6):
            harvest_one_row()
        for i in range(2):
            turn_left()
            move()</pre>
<p>AI 回答: <a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>進一步要求:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">請在類別中加上一個採收方向的參數, 內建變數是 horizontal 採收, 也就是由西邊往東邊的水平方向進行採收, 但若該方向變數設為 vertical 則會由南邊往北的所謂垂直方向進行採收</pre>
<p>AI 回應: <a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex2.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex2.py </a> </p>
<p>延伸到採收 harvest2 農田: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest2.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest2.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>但卻沒能套用到 harvest3 農田: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>而必須要在每一個座標點留下或放入一個紅蘿蔔: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex3.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex3.py </a> </p>
<h2>Otto_ninja</h2>
<p><a href="https://www.printables.com/model/231580-otto-ninja-starter-robot/files">https://www.printables.com/model/231580-otto-ninja-starter-robot/files</a> </p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NDIwhuxQPN8?si=ED_FAObUkAVFT5L-" title="YouTube video player" width="560"></iframe></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button><button id="robot1">機器人巡邏</button><button id="free_walk">自由行</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 累加程式開始 -->
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 累加程式結束 --> <!-- 機器人巡邏程式開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

robot1_url = "https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/b33c5fc2a0774f8c5d2b0e8c7c7908e58d73bb94/robot_1.py"

# 從 gist 取得程式碼
robot1_src = open(robot1_url).read()
def robot1(ev):
    Ace2.editor.setValue(robot1_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "robot1" 的按鈕點按時, 執行 robot1 方法
doc["robot1"].bind('click', robot1)
</script>
<!-- 機器人巡邏程式結束 --></p>
<!-- 機器人自由行程式開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

free_walk_url = "https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/9d55811467e411eb89f74171d8a586ae9f1a96aa/brython_robot_free_walk.py"

# 從 gist 取得程式碼
free_walk_src = open(free_walk_url).read()
def free_walk(ev):
    Ace2.editor.setValue(free_walk_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "free_walk" 的按鈕點按時, 執行 robot1 方法
doc["free_walk"].bind('click', free_walk)
</script>
<!-- 機器人自由行程式結束 -->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>
<h2>Brython_ex</h2>
<p><a href="https://mde.tw/cp2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/9d55811467e411eb89f74171d8a586ae9f1a96aa/brython_robot_free_walk.py">機器人自由行</a></p>
<p>Can we bring pythonpad into this page? <a href="https://pythonpad.github.io/docs/manual.html">https://pythonpad.github.io/docs/manual.html</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html, timer
 
canvas = html.CANVAS(width=400, height=400)
brython_div = document["brython_div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")
 
def draw_grid():
    ctx.clearRect(0, 0, 400, 400)
    ctx.strokeStyle = "#ccc"
    ctx.lineWidth = 1
    for i in range(0, 401, 40):
        ctx.beginPath()
        ctx.moveTo(i, 0)
        ctx.lineTo(i, 400)
        ctx.stroke()
        ctx.beginPath()
        ctx.moveTo(0, i)
        ctx.lineTo(400, i)
        ctx.stroke()
    
    # 畫出邊界
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.strokeRect(0, 0, 400, 400)

def draw_robot(x, y):
    draw_grid()
    ctx.fillStyle = "blue"
    ctx.beginPath()
    ctx.arc(x * 40 + 20, y * 40 + 20, 15, 0, 6.28)
    ctx.fill()

x, y = 0, 0
def move():
    global x
    x = (x + 1) % 10
    draw_robot(x, y)

draw_grid()
timer.set_interval(move, 500)</pre>
<p>以下程式, 按 j 隨箭頭方向前進, 按下 i 則左轉</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html, bind

canvas = html.CANVAS(width=400, height=400)
brython_div = document["brython_div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

cols, rows = 10, 10
cell = 40

# 上、右、下、左
directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]

robot = {
    "x": 5,
    "y": 5,
    "dir": 0  # 初始朝向上
}

def draw_grid():
    ctx.clearRect(0, 0, 400, 400)
    ctx.strokeStyle = "#ccc"
    ctx.lineWidth = 1
    for i in range(0, 401, cell):
        ctx.beginPath()
        ctx.moveTo(i, 0)
        ctx.lineTo(i, 400)
        ctx.stroke()
        ctx.beginPath()
        ctx.moveTo(0, i)
        ctx.lineTo(400, i)
        ctx.stroke()
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.strokeRect(0, 0, 400, 400)

def draw_robot():
    draw_grid()
    cx = robot["x"] * cell + cell // 2
    cy = robot["y"] * cell + cell // 2
    size = 15
    d = robot["dir"]

    ctx.fillStyle = "blue"
    ctx.beginPath()
    if d == 0:  # 上
        ctx.moveTo(cx, cy - size)
        ctx.lineTo(cx - size, cy + size)
        ctx.lineTo(cx + size, cy + size)
    elif d == 1:  # 右
        ctx.moveTo(cx + size, cy)
        ctx.lineTo(cx - size, cy - size)
        ctx.lineTo(cx - size, cy + size)
    elif d == 2:  # 下
        ctx.moveTo(cx, cy + size)
        ctx.lineTo(cx - size, cy - size)
        ctx.lineTo(cx + size, cy - size)
    elif d == 3:  # 左
        ctx.moveTo(cx - size, cy)
        ctx.lineTo(cx + size, cy - size)
        ctx.lineTo(cx + size, cy + size)
    ctx.closePath()
    ctx.fill()

@bind(document, "keydown")
def on_key(e):
    key = e.key.lower()
    if key == "i":
        robot["dir"] = (robot["dir"] - 1) % 4  # 左轉
    elif key == "j":
        dx, dy = directions[robot["dir"]]
        nx = robot["x"] + dx
        ny = robot["y"] + dy
        if 0 &lt;= nx &lt; cols and 0 &lt;= ny &lt; rows:
            robot["x"] = nx
            robot["y"] = ny
    draw_robot()

draw_robot()</pre>
<p>Optimization:</p>
<p>題目:<br/>一位製造商想設計一個開口式的盒子，其底部為長方形，寬為 x、長為 y，且總表面積為 80 平方公分。 請問要使盒子的體積達到最大，應該選用哪些尺寸？</p>
<p>直接利用 Python 以 <a href="https://en.wikipedia.org/wiki/Differential_evolution">Differential Evoluation</a> 運算: <a href="/downloads/de_volume_max.py">de_volume_max.py</a></p>
<p style="padding-left: 30px;">參考: </p>
<p style="padding-left: 60px;"><a href="/downloads/de_volume_max.c">de_volume_max.c</a>, <a href="/downloads/de_volume_max.v">de_volume_max.v</a></p>
<p>也可以採網頁前端使用 Brython，後端採 Python 執行運算後將資料傳回網頁: <a href="/downloads/brython_w_flask.7z">brython_w_flask.7z</a></p>
<h1>Pyodide</h1>
<script src="https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js"></script>
<p><button id="version">version</button> <button id="hello_button">hello</button> <button id="add1to100">1 add to 100</button> <button id="robot1">機器人巡邏</button><button id="free_walk">自由行</button> <button id="numpy_ode">numpy_ode</button></p>
<!-- Ace Editor Scripts -->
<script src="/static/ace/FileSaver.min.js"></script>
<script src="/static/ace/filereader.js"></script>
<script src="/static/ace/ace.js"></script>
<script src="/static/ace/ext-language_tools.js"></script>
<script src="/static/ace/mode-python.js"></script>
<script src="/static/ace/snippets/python.js"></script>
<!-- Editor 1 -->
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><button id="kw_run1">Run</button> <button id="kw_output1">Output</button> <button id="kw_clear_console1">清除輸出區</button> <button onclick="location.reload()">Reload</button></p>
<p><textarea id="kw_console1"></textarea></p>
<div id="pyodide_div1"></div>
<div id="mpl_output1"></div>
<div id="brython_div1"></div>
<hr/>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button></p>
<!-- Editor 2 -->
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><button id="kw_run2">Run</button> <button id="kw_output2">Output</button> <button id="kw_clear_console2">清除輸出區</button> <button onclick="location.reload()">Reload</button></p>
<p><textarea id="kw_console2"></textarea></p>
<div id="pyodide_div2"></div>
<div id="mpl_output2"></div>
<div id="brython_div2"></div>
<script>
function getUrlParam(key) {
  return new URLSearchParams(window.location.search).get(key);
}
function updateUrlParam(key, value) {
  const url = new URL(window.location);
  url.searchParams.set(key, value);
  window.history.replaceState({}, "", url);
}

let pyodide, editor1, editor2;

document.addEventListener("DOMContentLoaded", async () => {
  editor1 = ace.edit("kw_editor1");
  editor1.setTheme("ace/theme/chrome");
  editor1.session.setMode("ace/mode/python");

  editor2 = ace.edit("kw_editor2");
  editor2.setTheme("ace/theme/chrome");
  editor2.session.setMode("ace/mode/python");

  pyodide = await loadPyodide();
  await pyodide.loadPackage(["numpy", "scipy", "matplotlib", "micropip"]);

  // 定義 hello() 模組
  const code = `
def hello():
    print("Hello from custom module!")
`;
  pyodide.runPython(code);

  const GIST_ADD1TO100 =
    "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/" +
    "c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py";
  const NUMPY_ODE =
    "https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/" +
    "98d582539545b3c9fbfa35dd3e605c506367618e/pyodide_ode_ex1.py";
  const PYODIDE_ROBOT_ANIMATION =
    "https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/" +
    "f3d75d08f2b90f4470342e91ee1e5c36b5f950bf/pyodide_robot_ex1.py";
  const FREE_WALK = 
    "https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/" + "d1659628afe5d36a026ef305dc639f6be4c9f608/pyodide_robot_ex3.py"

  const src = getUrlParam("src");
  if (src === PYODIDE_ROBOT_ANIMATION) {
    const robotCode = await fetchCode(PYODIDE_ROBOT_ANIMATION);
    editor1.setValue(robotCode, -1);
    updateUrlParam("src", PYODIDE_ROBOT_ANIMATION);
    runPyodide(editor1, "kw_console1", "brython_div1");
  } else {
    const initialCode = await fetchCode(src || GIST_ADD1TO100);
    editor1.setValue(initialCode, -1);
    runPyodide(editor1, "kw_console1", "brython_div1");
  }

  editor2.setValue("", -1);

  document.getElementById("version").onclick = () => {
    const vcode = `
import pyodide
import sys
import matplotlib
import numpy
import scipy
print("Pyodide version:", pyodide.__version__)
print("Python version :", sys.version)
print("matplotlib version:", matplotlib.__version__)
print("numpy version:", numpy.__version__)
print("scipy version:", scipy.__version__)
`;
    editor1.setValue(vcode, -1);
    updateUrlParam("src", "inline_version");
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("hello_button").onclick = () => {
    editor1.setValue("hello()", -1);
    updateUrlParam("src", "inline_hello");
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("add1to100").onclick = async () => {
    const c = await fetchCode(GIST_ADD1TO100);
    editor1.setValue(c, -1);
    updateUrlParam("src", GIST_ADD1TO100);
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("numpy_ode").onclick = async () => {
    const c = await fetchCode(NUMPY_ODE);
    editor1.setValue(c, -1);
    updateUrlParam("src", NUMPY_ODE);
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("robot1").onclick = async () => {
    const rc = await fetchCode(PYODIDE_ROBOT_ANIMATION);
    editor1.setValue(rc, -1);
    updateUrlParam("src", PYODIDE_ROBOT_ANIMATION);
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("free_walk").onclick = async () => {
    const rc = await fetchCode(FREE_WALK);
    editor1.setValue(rc, -1);
    updateUrlParam("src", FREE_WALK);
    runPyodide(editor1, "kw_console1", "brython_div1");
  };

  document.getElementById("add1to100part2").onclick = async () => {
    const c = await fetchCode(GIST_ADD1TO100);
    editor2.setValue(c, -1);
    runPyodide(editor2, "kw_console2", "brython_div2");
  };

  document.getElementById("kw_run1").onclick = () =>
    runPyodide(editor1, "kw_console1", "brython_div1");
  document.getElementById("kw_run2").onclick = () =>
    runPyodide(editor2, "kw_console2", "brython_div2");
  document.getElementById("kw_clear_console1").onclick = () =>
    clearOutput("kw_console1", "brython_div1");
  document.getElementById("kw_clear_console2").onclick = () =>
    clearOutput("kw_console2", "brython_div2");
});

// 處理兩個 Output 列數
  document.getElementById("kw_output1").onclick = () => {
    const ta = document.getElementById("kw_console1");
    ta.rows = "15";
    ta.cols = "70";
    ta.scrollTop = 0;
  };
  document.getElementById("kw_output2").onclick = () => {
    const ta = document.getElementById("kw_console2");
    ta.rows = "15";
    ta.cols = "70";
    ta.scrollTop = 0;
  };

async function fetchCode(url) {
  const r = await fetch(url);
  if (!r.ok) throw new Error(`載入失敗 ${r.status}`);
  return await r.text();
}

function clearOutput(consoleId, divId) {
  document.getElementById(consoleId).value = "";
  document.getElementById(divId).innerHTML = "";
}

async function runPyodide(editor, consoleId, divId) {
  document.getElementById(consoleId).value = "";
  document.getElementById(divId).innerHTML = "";

  await pyodide.runPythonAsync(`
import sys
class JsWriter:
  def write(self, s):
    from js import document
    ta = document.getElementById("${consoleId}")
    ta.value += s
    ta.scrollTop = ta.scrollHeight
sys.stdout = JsWriter()
sys.stderr = JsWriter()
`);

  try {
    await pyodide.runPythonAsync(editor.getValue());
  } catch (e) {
    document.getElementById(consoleId).value += "\n錯誤：" + e.toString();
  }
}
</script>
<h2>Pyodide_ex</h2>
<p><a href="https://mde.tw/cp2025/content/Pyodide.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/f3d75d08f2b90f4470342e91ee1e5c36b5f950bf/pyodide_robot_ex1.py">Pyodide 機器人巡邏</a></p>
<p>Pyodide 導入客製化模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">const code = `
# 定義一個模組內容
def hello():
    print("Hello from custom module!")
`;
pyodide.runPython(code);
</pre>
<p><a href="https://mde.tw/cp2025/content/Pyodide.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/3ed6869dcd7312254513ca507de17945e15a9b6f/box_max_volume_short.py">Volume_max_pyodide_de_short.py</a></p>
<p><a href="https://mde.tw/cp2025/content/Pyodide.html?src=https://gist.githubusercontent.com/mdecycu/ec4bb35dd0769e7a83d2a9fa57878a67/raw/3ed6869dcd7312254513ca507de17945e15a9b6f/box_volume_max_pyodide_de.py">Volume_max_pyodide_de.py</a></p>
<p></p>