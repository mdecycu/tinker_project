var tipuesearch = {"pages": [{'title': 'About', 'text': '可攜程式套件: \n portable_2026.7z \xa0(387MB) \n 解開壓縮後，雙點擊\xa0start_miniconda3.bat 啟動可攜系統，雙點擊 stop.bat 關閉可攜系統。 \n 可攜系統啟動後，在命令列執行 conda activate y:\\envs\\cmsimde 可進入能執行 CMSiMDE 的環境。 \n 若希望可攜系統啟動直接進入 cmsimde 環境，可將 start_miniconda3.bat 檔案中第 98 行: call "%CONDA_ROOT%\\Scripts\\activate.bat" %ENV_NAME% 更換為 call "%CONDA_ROOT%\\Scripts\\activate.bat" %Disk%:\\envs\\cmsimde \n', 'tags': '', 'url': 'About.html'}, {'title': 'Reeborg', 'text': 'https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1.py \n https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1_east_west.py \xa0 \n \n https://mde.tw/reeborg \n https://github.com/mdecycu/cs101 \n https://reeborg.ca/docs/en/python/index.html \n https://aroberge.github.io/reeborg-api/ \n if using local static port 9442: \n Reeborg \n For Github Pages: \n Reeborg \n \n', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'ex1', 'text': 'https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1.py \xa0是已知的機器人採收紅蘿蔔的程式，經由以下與 Copilot 的對話，希望透過 Python Class 的編寫解決特定範圍農作物採收的程式。 \n 問句: \n 以下是 Reeborg 一個用來採收紅蘿蔔的程式, 目前位於 (3,3) 到 (8,8) 的區域中各座標點, 各有一個紅羅蔔等待採收, 現在想要建立一個 harvest() class, 可以利用 (3,3), (8,8)作為標定有農作物必須採收的兩個區域對角點座標, 而程式可以利用此一 harvest 類別生成案例完成採收的任務: def turn(int):\n    for i in range(int):\n        turn_left()\n        \ndef new_move(int):\n    for i in range(int):\n        move()\n        \ndef harvest_one_row():\n    while object_here():\n        take()\n    else:\n        move()\n# move to the field\nnew_move(2)\nturn_left()\nnew_move(2)\n\nfor i in range(3):\n    while is_facing_north():\n        for i in range(6):\n            harvest_one_row()\n        for i in range(2):\n            turn(3)\n            move() \n    else:\n        for i in range(6):\n            harvest_one_row()\n        for i in range(2):\n            turn_left()\n            move() \n AI 回答:\xa0 https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1_class_ex1.py \xa0 \n 進一步要求: \n 請在類別中加上一個採收方向的參數, 內建變數是 horizontal 採收, 也就是由西邊往東邊的水平方向進行採收, 但若該方向變數設為 vertical 則會由南邊往北的所謂垂直方向進行採收 \n AI 回應:\xa0 https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1_class_ex2.py\xa0 \xa0 \n 延伸到採收 harvest2 農田:\xa0 https://mde.tw/cp2025/reeborg/?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest2.json&editor=python/harvest1_class_ex1.py \xa0 \n 但卻沒能套用到 harvest3 農田:\xa0 https://mde.tw/cp2025/reeborg/?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest3.json&editor=python/harvest1_class_ex1.py \xa0 \n 而必須要在每一個座標點留下或放入一個紅蘿蔔:\xa0 https://mde.tw/cp2025/reeborg/?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest3.json&editor=python/harvest1_class_ex3.py\xa0 \xa0 \n', 'tags': '', 'url': 'ex1.html'}, {'title': 'Otto_ninja', 'text': 'https://www.printables.com/model/231580-otto-ninja-starter-robot/files \xa0 \n \n', 'tags': '', 'url': 'Otto_ninja.html'}, {'title': 'Brython', 'text': '1 add to 100 機器人巡邏 自由行 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  累加程式開始  \n \n  累加程式結束     機器人巡邏程式開始  \n \n  機器人巡邏程式結束  \n  機器人自由行程式開始  \n \n \n \n  機器人自由行程式結束  \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Brython_ex', 'text': '機器人自由行 \n Can we bring pythonpad into this page?\xa0 https://pythonpad.github.io/docs/manual.html \xa0 \n from browser import document, html, timer\n \ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = document["brython_div1"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\n \ndef draw_grid():\n    ctx.clearRect(0, 0, 400, 400)\n    ctx.strokeStyle = "#ccc"\n    ctx.lineWidth = 1\n    for i in range(0, 401, 40):\n        ctx.beginPath()\n        ctx.moveTo(i, 0)\n        ctx.lineTo(i, 400)\n        ctx.stroke()\n        ctx.beginPath()\n        ctx.moveTo(0, i)\n        ctx.lineTo(400, i)\n        ctx.stroke()\n    \n    # 畫出邊界\n    ctx.strokeStyle = "black"\n    ctx.lineWidth = 2\n    ctx.strokeRect(0, 0, 400, 400)\n\ndef draw_robot(x, y):\n    draw_grid()\n    ctx.fillStyle = "blue"\n    ctx.beginPath()\n    ctx.arc(x * 40 + 20, y * 40 + 20, 15, 0, 6.28)\n    ctx.fill()\n\nx, y = 0, 0\ndef move():\n    global x\n    x = (x + 1) % 10\n    draw_robot(x, y)\n\ndraw_grid()\ntimer.set_interval(move, 500) \n 以下程式, 按 j 隨箭頭方向前進, 按下 i 則左轉 \n from browser import document, html, bind\n\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = document["brython_div1"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\n\ncols, rows = 10, 10\ncell = 40\n\n# 上、右、下、左\ndirections = [(0, -1), (1, 0), (0, 1), (-1, 0)]\n\nrobot = {\n    "x": 5,\n    "y": 5,\n    "dir": 0  # 初始朝向上\n}\n\ndef draw_grid():\n    ctx.clearRect(0, 0, 400, 400)\n    ctx.strokeStyle = "#ccc"\n    ctx.lineWidth = 1\n    for i in range(0, 401, cell):\n        ctx.beginPath()\n        ctx.moveTo(i, 0)\n        ctx.lineTo(i, 400)\n        ctx.stroke()\n        ctx.beginPath()\n        ctx.moveTo(0, i)\n        ctx.lineTo(400, i)\n        ctx.stroke()\n    ctx.strokeStyle = "black"\n    ctx.lineWidth = 2\n    ctx.strokeRect(0, 0, 400, 400)\n\ndef draw_robot():\n    draw_grid()\n    cx = robot["x"] * cell + cell // 2\n    cy = robot["y"] * cell + cell // 2\n    size = 15\n    d = robot["dir"]\n\n    ctx.fillStyle = "blue"\n    ctx.beginPath()\n    if d == 0:  # 上\n        ctx.moveTo(cx, cy - size)\n        ctx.lineTo(cx - size, cy + size)\n        ctx.lineTo(cx + size, cy + size)\n    elif d == 1:  # 右\n        ctx.moveTo(cx + size, cy)\n        ctx.lineTo(cx - size, cy - size)\n        ctx.lineTo(cx - size, cy + size)\n    elif d == 2:  # 下\n        ctx.moveTo(cx, cy + size)\n        ctx.lineTo(cx - size, cy - size)\n        ctx.lineTo(cx + size, cy - size)\n    elif d == 3:  # 左\n        ctx.moveTo(cx - size, cy)\n        ctx.lineTo(cx + size, cy - size)\n        ctx.lineTo(cx + size, cy + size)\n    ctx.closePath()\n    ctx.fill()\n\n@bind(document, "keydown")\ndef on_key(e):\n    key = e.key.lower()\n    if key == "i":\n        robot["dir"] = (robot["dir"] - 1) % 4  # 左轉\n    elif key == "j":\n        dx, dy = directions[robot["dir"]]\n        nx = robot["x"] + dx\n        ny = robot["y"] + dy\n        if 0 <= nx < cols and 0 <= ny < rows:\n            robot["x"] = nx\n            robot["y"] = ny\n    draw_robot()\n\ndraw_robot() \n Optimization: \n 題目: 一位製造商想設計一個開口式的盒子，其底部為長方形，寬為 x、長為 y，且總表面積為 80 平方公分。 請問要使盒子的體積達到最大，應該選用哪些尺寸？ \n 直接利用 Python 以  Differential Evoluation  運算:\xa0 de_volume_max.py \n 參考:\xa0 \n de_volume_max.c ,\xa0 de_volume_max.v \n 也可以採網頁前端使用 Brython，後端採 Python 執行運算後將資料傳回網頁:\xa0 brython_w_flask.7z \n', 'tags': '', 'url': 'Brython_ex.html'}, {'title': 'Pyodide', 'text': '\n \n \n version   hello   1 add to 100   機器人巡邏 自由行   numpy_ode \n  Ace Editor Scripts  \n \n \n \n \n \n \n \n \n  Editor 1  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 \n  Editor 2  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Pyodide.html'}, {'title': 'Pyodide_ex', 'text': 'Pyodide 機器人巡邏 \n Pyodide 導入客製化模組: \n const code = `\n# 定義一個模組內容\ndef hello():\n    print("Hello from custom module!")\n`;\npyodide.runPython(code);\n \n Volume_max_pyodide_de_short.py \n Volume_max_pyodide_de.py \n', 'tags': '', 'url': 'Pyodide_ex.html'}]};